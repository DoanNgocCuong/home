#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Advanced Writing Tracker - Article Scanner
T√≠ch h·ª£p v·ªõi web app ƒë·ªÉ scan b√†i vi·∫øt th·ª±c t·∫ø
"""

import os
import json
import csv
from datetime import datetime
import re
from pathlib import Path
import sys

def analyze_article_folder(folder_path, output_format='json'):
    """
    Scan th∆∞ m·ª•c b√†i vi·∫øt v√† t·∫°o file d·ªØ li·ªáu
    
    Args:
        folder_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a b√†i vi·∫øt
        output_format: 'csv' ho·∫∑c 'json'
    """
    
    # C√°c extension file ƒë∆∞·ª£c h·ªó tr·ª£
    supported_extensions = {'.txt', '.md', '.docx', '.doc', '.html', '.rtf'}
    
    articles_data = []
    
    # Duy·ªát qua t·∫•t c·∫£ file trong th∆∞ m·ª•c (bao g·ªìm c·∫£ th∆∞ m·ª•c con)
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            file_ext = Path(file).suffix.lower()
            
            if file_ext in supported_extensions:
                try:
                    # L·∫•y th√¥ng tin file
                    stat_info = os.stat(file_path)
                    
                    # Ng√†y t·∫°o file (ho·∫∑c ng√†y s·ª≠a ƒë·ªïi)
                    creation_time = datetime.fromtimestamp(stat_info.st_ctime)
                    modified_time = datetime.fromtimestamp(stat_info.st_mtime)
                    
                    # T√™n file (b·ªè extension)
                    title = Path(file).stem
                    
                    # ∆Ø·ªõc t√≠nh s·ªë t·ª´
                    word_count = estimate_word_count(file_path, file_ext)
                    
                    # ƒêo√°n danh m·ª•c t·ª´ ƒë∆∞·ªùng d·∫´n ho·∫∑c t√™n file
                    category = guess_category(file_path, title)
                    
                    # K√≠ch th∆∞·ªõc file (KB)
                    file_size = round(stat_info.st_size / 1024, 2)
                    
                    # ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
                    relative_path = os.path.relpath(file_path, folder_path)
                    
                    # Th∆∞ m·ª•c ch·ª©a file
                    folder = os.path.dirname(relative_path) or "Root"
                    
                    article_info = {
                        'id': len(articles_data) + 1,
                        'title': title,
                        'filePath': file_path,
                        'relativePath': relative_path,
                        'category': category,
                        'date': creation_time.strftime('%Y-%m-%d'),
                        'modifiedDate': modified_time.strftime('%Y-%m-%d'),
                        'wordCount': word_count,
                        'fileSize': file_size,
                        'fileExtension': file_ext,
                        'folder': folder,
                        'createdAt': creation_time.isoformat()
                    }
                    
                    articles_data.append(article_info)
                    print(f"‚úÖ ƒê√£ ph√¢n t√≠ch: {title}")
                    
                except Exception as e:
                    print(f"‚ùå L·ªói khi ƒë·ªçc file {file}: {e}")
    
    # S·∫Øp x·∫øp theo ng√†y t·∫°o
    articles_data.sort(key=lambda x: x['date'], reverse=True)
    
    # Xu·∫•t d·ªØ li·ªáu
    if output_format.lower() == 'json':
        output_file = 'articles_data.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(articles_data, f, ensure_ascii=False, indent=2)
    else:
        output_file = 'articles_data.csv'
        with open(output_file, 'w', newline='', encoding='utf-8') as f:
            if articles_data:
                writer = csv.DictWriter(f, fieldnames=articles_data[0].keys())
                writer.writeheader()
                writer.writerows(articles_data)
    
    print(f"\nüéâ Ho√†n th√†nh! ƒê√£ t·∫°o file: {output_file}")
    print(f"üìä T·ªïng c·ªông: {len(articles_data)} b√†i vi·∫øt")
    return output_file, articles_data

def estimate_word_count(file_path, file_ext):
    """∆Ø·ªõc t√≠nh s·ªë t·ª´ trong file"""
    try:
        if file_ext in ['.txt', '.md']:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                # ƒê·∫øm t·ª´ (t√°ch b·∫±ng kho·∫£ng tr·∫Øng)
                words = len(content.split())
                return words
        elif file_ext == '.html':
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                # Lo·∫°i b·ªè HTML tags v√† ƒë·∫øm t·ª´
                clean_text = re.sub(r'<[^>]+>', ' ', content)
                words = len(clean_text.split())
                return words
        else:
            # ƒê·ªëi v·ªõi c√°c file kh√°c, ∆∞·ªõc t√≠nh d·ª±a tr√™n k√≠ch th∆∞·ªõc
            file_size = os.path.getsize(file_path)
            # ∆Ø·ªõc t√≠nh ~5 k√Ω t·ª±/t·ª´
            estimated_words = file_size // 5
            return max(100, estimated_words)  # T·ªëi thi·ªÉu 100 t·ª´
    except:
        return 500  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

def guess_category(file_path, title):
    """ƒêo√°n danh m·ª•c t·ª´ ƒë∆∞·ªùng d·∫´n ho·∫∑c ti√™u ƒë·ªÅ"""
    path_lower = file_path.lower()
    title_lower = title.lower()
    
    categories = {
        'technical': ['tech', 'technology', 'ai', 'machine', 'programming', 'code', 'software', 'c√¥ng ngh·ªá', 'domain', 'ml', 'dl', 'nlp', 'rag', 'llm'],
        'business': ['business', 'marketing', 'finance', 'money', 'kinh doanh', 't√†i ch√≠nh', 'market', 'product'],
        'personal': ['life', 'lifestyle', 'living', 'ƒë·ªùi s·ªëng', 'cu·ªôc s·ªëng', 'personal', 'note', 'daily', 'reflection'],
        'education': ['education', 'learning', 'study', 'gi√°o d·ª•c', 'h·ªçc t·∫≠p', 'course', 'lesson', 'tutorial', 'guide'],
        'other': ['other', 'misc', 'kh√°c', 'untitled']
    }
    
    full_text = f"{path_lower} {title_lower}"
    
    for category, keywords in categories.items():
        if any(keyword in full_text for keyword in keywords):
            return category
    
    return 'other'

def create_sample_usage():
    """T·∫°o v√≠ d·ª• s·ª≠ d·ª•ng"""
    print("=== ADVANCED WRITING TRACKER - ARTICLE SCANNER ===")
    print("1. Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c b√†i vi·∫øt c·ªßa b·∫°n")
    print("2. Ch·∫°y script ƒë·ªÉ t·∫°o file JSON")
    print("3. Import file JSON v√†o web tracker")
    print()
    
    # V√≠ d·ª• s·ª≠ d·ª•ng
    folder_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c b√†i vi·∫øt (Enter ƒë·ªÉ d√πng m·∫∑c ƒë·ªãnh): ").strip()
    
    if not folder_path:
        folder_path = r"D:\vip_DOCUMENTS_OBS\home"  # ƒê∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
        print(f"S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh: {folder_path}")
    
    if os.path.exists(folder_path):
        print(f"\nüìÅ ƒêang scan th∆∞ m·ª•c: {folder_path}")
        output_file, articles = analyze_article_folder(folder_path, 'json')
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        print(f"\nüìà TH·ªêNG K√ä:")
        print(f"- T·ªïng b√†i vi·∫øt: {len(articles)}")
        
        categories = {}
        for article in articles:
            cat = article['category']
            categories[cat] = categories.get(cat, 0) + 1
        
        print("- Ph√¢n b·ªë danh m·ª•c:")
        for cat, count in categories.items():
            print(f"  ‚Ä¢ {cat}: {count} b√†i")
            
        print(f"\nüíæ File ƒë√£ t·∫°o: {output_file}")
        print("üîÑ B√¢y gi·ªù b·∫°n c√≥ th·ªÉ import file n√†y v√†o web tracker!")
        
    else:
        print(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {folder_path}")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        # Ch·∫°y v·ªõi tham s·ªë command line
        folder_path = sys.argv[1]
        output_format = sys.argv[2] if len(sys.argv) > 2 else 'json'
        
        if os.path.exists(folder_path):
            print(f"üìÅ Scanning: {folder_path}")
            output_file, articles = analyze_article_folder(folder_path, output_format)
            print(f"‚úÖ Completed: {len(articles)} articles found")
        else:
            print(f"‚ùå Folder not found: {folder_path}")
    else:
        # Ch·∫°y interactive mode
        create_sample_usage()
