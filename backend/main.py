#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
================================================================================
                    DOMAIN PROGRESS TRACKER BACKEND - FASTAPI
================================================================================

M√î T·∫¢ T·ªîNG QUAN:
    ·ª®ng d·ª•ng backend ƒë∆∞·ª£c x√¢y d·ª±ng b·∫±ng FastAPI ƒë·ªÉ theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p 
    th√¥ng qua h·ªá th·ªëng XP/Level gi·ªëng nh∆∞ game. H·ªá th·ªëng s·∫Ω qu√©t c√°c th∆∞ m·ª•c 
    domain h·ªçc t·∫≠p v√† t√≠nh to√°n ƒëi·ªÉm kinh nghi·ªám (XP) d·ª±a tr√™n s·ªë l∆∞·ª£ng b√†i vi·∫øt 
    v√† n·ªôi dung h·ªçc t·∫≠p.

CH·ª®C NƒÇNG CH√çNH:
    1. Qu√©t v√† ph√¢n t√≠ch c√°c th∆∞ m·ª•c domain h·ªçc t·∫≠p
    2. T√≠nh to√°n XP v√† Level d·ª±a tr√™n s·ªë b√†i vi·∫øt v√† t·ª´ ng·ªØ
    3. Theo d√µi streak days (s·ªë ng√†y li√™n ti·∫øp h·ªçc t·∫≠p)
    4. Cung c·∫•p API RESTful ƒë·ªÉ frontend c√≥ th·ªÉ truy c·∫≠p d·ªØ li·ªáu
    5. Th·ªëng k√™ t·ªïng quan v·ªÅ ti·∫øn ƒë·ªô h·ªçc t·∫≠p

C·∫§U TR√öC H·ªÜ TH·ªêNG:
    - Domain 1: Mathematical & Statistical Foundation (M√†u Indigo)
    - Domain 2: Programming & Software Engineering (M√†u Emerald)
    - Domain 3: Machine Learning Fundamentals (M√†u Amber)
    - Domain 4: Deep Learning & Neural Networks (M√†u Pink)
    - Domain 5: Data Engineering & Processing (M√†u Blue)
    - Domain 6: Production Systems & MLOps (M√†u Violet)
    - Domain 7: Cloud & Infrastructure (M√†u Red)
    - Domain 8: Advanced AI Applications (M√†u Teal)
    - Domain 9: Research & Innovation (M√†u Orange)
    - Domain 10: Business & Entrepreneurship (M√†u Lime)

C√îNG TH·ª®C T√çNH XP:
    - Base XP: 100 ƒëi·ªÉm cho m·ªói b√†i vi·∫øt
    - Bonus XP: 1 ƒëi·ªÉm cho m·ªói 10 t·ª´ trong n·ªôi dung
    - T·ªïng XP = (S·ªë b√†i vi·∫øt √ó 100) + (T·ªïng t·ª´ √∑ 10)

C√îNG TH·ª®C T√çNH LEVEL:
    - Level 1: C·∫ßn 1000 XP
    - Level 2: C·∫ßn 1500 XP (1000 √ó 1.5)
    - Level 3: C·∫ßn 2250 XP (1500 √ó 1.5)
    - Level n: C·∫ßn 1000 √ó (1.5^(n-1)) XP

API ENDPOINTS:
    - GET /: Th√¥ng tin c∆° b·∫£n v·ªÅ API
    - GET /api/domains: L·∫•y danh s√°ch t·∫•t c·∫£ domains v·ªõi XP/Level
    - POST /api/domains/refresh: L√†m m·ªõi d·ªØ li·ªáu domains
    - GET /api/domains/stats: L·∫•y th·ªëng k√™ t·ªïng quan

T√ÅC GI·∫¢: H·ªá th·ªëng theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p
NG√ÄY T·∫†O: 2024
PHI√äN B·∫¢N: 1.0.0
================================================================================
"""

import os
import json
from datetime import datetime, timedelta
from pathlib import Path
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict, Any, Optional
import re

app = FastAPI(
    title="Domain Progress Tracker API",
    description="API ƒë·ªÉ scan v√† t√≠nh to√°n XP/Level cho c√°c domain h·ªçc t·∫≠p",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# C·∫•u h√¨nh
DATA_SCIENCE_PATH = r"D:\vip_DOCUMENTS_OBS\home\DATA SCIENCE AND AI"
SUPPORTED_EXTENSIONS = {'.txt', '.md', '.docx', '.doc', '.html', '.rtf'}

# Pydantic Models
class DomainData(BaseModel):
    xp: int
    level: int
    color: str
    taskCount: int
    streakDays: int
    maxStreakDays: int
    totalDays: int
    lastTaskDate: str

class DomainsResponse(BaseModel):
    success: bool
    domains: Dict[str, DomainData]
    count: int
    last_scan: str

class StatsResponse(BaseModel):
    success: bool
    stats: Dict[str, Any]
    last_scan: str

class ErrorResponse(BaseModel):
    success: bool
    error: str

# Domain colors mapping
DOMAIN_COLORS = {
    'Domain 1': '#4F46E5',  # Indigo - Mathematical Foundation
    'Domain 2': '#10B981',  # Emerald - Programming & Software Engineering  
    'Domain 3': '#F59E0B',  # Amber - Machine Learning Fundamentals
    'Domain 4': '#EC4899',  # Pink - Deep Learning & Neural Networks
    'Domain 5': '#3B82F6',  # Blue - Data Engineering & Processing
    'Domain 6': '#8B5CF6',  # Violet - Production Systems & MLOps
    'Domain 7': '#EF4444',  # Red - Cloud & Infrastructure
    'Domain 8': '#14B8A6',  # Teal - Advanced AI Applications
    'Domain 9': '#F97316',  # Orange - Research & Innovation
    'Domain 10': '#84CC16', # Lime - Business & Entrepreneurship
    'default': '#6B7280'    # Gray
}

def get_domain_color(domain_name):
    """
    L·∫•y m√†u s·∫Øc t∆∞∆°ng ·ª©ng cho domain d·ª±a tr√™n t√™n domain
    
    Args:
        domain_name (str): T√™n c·ªßa domain (v√≠ d·ª•: "Domain 1 Mathematical Foundation")
        
    Returns:
        str: M√£ m√†u hex t∆∞∆°ng ·ª©ng v·ªõi domain, m·∫∑c ƒë·ªãnh l√† m√†u x√°m n·∫øu kh√¥ng t√¨m th·∫•y
        
    V√≠ d·ª•:
        get_domain_color("Domain 1 Mathematical") -> "#4F46E5" (Indigo)
        get_domain_color("Domain 2 Programming") -> "#10B981" (Emerald)
        get_domain_color("Unknown Domain") -> "#6B7280" (Gray)
    """
    for key, color in DOMAIN_COLORS.items():
        if key in domain_name:
            return color
    return DOMAIN_COLORS['default']

def calculate_xp_from_articles(articles_count, total_words):
    """
    T√≠nh to√°n ƒëi·ªÉm kinh nghi·ªám (XP) d·ª±a tr√™n s·ªë l∆∞·ª£ng b√†i vi·∫øt v√† t·ªïng s·ªë t·ª´
    
    C√¥ng th·ª©c t√≠nh XP:
    - Base XP: 100 ƒëi·ªÉm cho m·ªói b√†i vi·∫øt
    - Bonus XP: 1 ƒëi·ªÉm cho m·ªói 10 t·ª´ trong n·ªôi dung
    - T·ªïng XP = Base XP + Bonus XP
    
    Args:
        articles_count (int): S·ªë l∆∞·ª£ng b√†i vi·∫øt/t√†i li·ªáu trong domain
        total_words (int): T·ªïng s·ªë t·ª´ trong t·∫•t c·∫£ b√†i vi·∫øt
        
    Returns:
        int: T·ªïng ƒëi·ªÉm XP ƒë∆∞·ª£c t√≠nh to√°n
        
    V√≠ d·ª•:
        calculate_xp_from_articles(5, 2500) -> 750 XP
        # Base: 5 √ó 100 = 500 XP
        # Bonus: 2500 √∑ 10 = 250 XP
        # T·ªïng: 500 + 250 = 750 XP
    """
    # Base XP: 100 XP per article
    base_xp = articles_count * 100
    
    # Bonus XP: 1 XP per 10 words
    word_bonus = total_words // 10
    
    return base_xp + word_bonus

def calculate_level_from_xp(xp):
    """
    T√≠nh to√°n level d·ª±a tr√™n t·ªïng ƒëi·ªÉm XP (h·ªá th·ªëng t∆∞∆°ng t·ª± game)
    
    C√¥ng th·ª©c t√≠nh level:
    - Level 1: C·∫ßn 1000 XP
    - Level 2: C·∫ßn 1500 XP (1000 √ó 1.5)
    - Level 3: C·∫ßn 2250 XP (1500 √ó 1.5)
    - Level n: C·∫ßn 1000 √ó (1.5^(n-1)) XP
    
    Args:
        xp (int): T·ªïng ƒëi·ªÉm XP hi·ªán t·∫°i
        
    Returns:
        int: Level t∆∞∆°ng ·ª©ng v·ªõi s·ªë XP
        
    V√≠ d·ª•:
        calculate_level_from_xp(800) -> 0 (ch∆∞a ƒë·ªß XP cho level 1)
        calculate_level_from_xp(1200) -> 1 (ƒë·ªß XP cho level 1, c√≤n 200 XP)
        calculate_level_from_xp(2500) -> 2 (ƒë·ªß XP cho level 1 v√† 2)
    """
    level = 0
    required_xp = 1000  # Base XP required for level 1
    LEVEL_XP_MULTIPLIER = 1.5
    
    current_xp = xp
    while current_xp >= required_xp:
        level += 1
        current_xp -= required_xp
        required_xp = int(1000 * (LEVEL_XP_MULTIPLIER ** level))
    
    return level

def estimate_word_count(file_path, file_ext):
    """
    ∆Ø·ªõc t√≠nh s·ªë t·ª´ trong file d·ª±a tr√™n lo·∫°i file v√† n·ªôi dung
    
    H·ªó tr·ª£ c√°c lo·∫°i file:
    - .txt, .md: ƒê·∫øm t·ª´ tr·ª±c ti·∫øp t·ª´ n·ªôi dung text
    - .html: Lo·∫°i b·ªè HTML tags r·ªìi ƒë·∫øm t·ª´
    - C√°c lo·∫°i kh√°c: ∆Ø·ªõc t√≠nh d·ª±a tr√™n k√≠ch th∆∞·ªõc file
    
    Args:
        file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file c·∫ßn ƒë·∫øm t·ª´
        file_ext (str): Ph·∫ßn m·ªü r·ªông c·ªßa file (v√≠ d·ª•: '.md', '.txt')
        
    Returns:
        int: S·ªë t·ª´ ∆∞·ªõc t√≠nh trong file
        
    V√≠ d·ª•:
        estimate_word_count("note.md", ".md") -> 150 (ƒë·∫øm t·ª´ th·ª±c t·∫ø)
        estimate_word_count("doc.docx", ".docx") -> 200 (∆∞·ªõc t√≠nh t·ª´ k√≠ch th∆∞·ªõc)
    """
    try:
        if file_ext in ['.txt', '.md']:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                words = len(content.split())
                return words
        elif file_ext == '.html':
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                clean_text = re.sub(r'<[^>]+>', ' ', content)
                words = len(clean_text.split())
                return words
        else:
            # ∆Ø·ªõc t√≠nh d·ª±a tr√™n k√≠ch th∆∞·ªõc file
            file_size = os.path.getsize(file_path)
            estimated_words = file_size // 5
            return max(100, estimated_words)
    except:
        return 500  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

def calculate_streak_days(article_dates):
    """
    T√≠nh to√°n s·ªë ng√†y li√™n ti·∫øp h·ªçc t·∫≠p (streak days) d·ª±a tr√™n ng√†y t·∫°o b√†i vi·∫øt
    
    Thu·∫≠t to√°n ƒê√öNG:
    1. Chuy·ªÉn t·∫•t c·∫£ ng√†y b√†i vi·∫øt th√†nh set ƒë·ªÉ lookup nhanh
    2. B·∫Øt ƒë·∫ßu t·ª´ ng√†y hi·ªán t·∫°i (ho·∫∑c ng√†y g·∫ßn nh·∫•t c√≥ b√†i vi·∫øt)
    3. Check xem ng√†y ƒë√≥ c√≥ trong set kh√¥ng
    4. N·∫øu c√≥: tƒÉng streak, chuy·ªÉn sang ng√†y tr∆∞·ªõc ƒë√≥
    5. N·∫øu kh√¥ng c√≥: d·ª´ng streak
    6. L·∫∑p l·∫°i cho ƒë·∫øn khi g·∫∑p ng√†y kh√¥ng c√≥ b√†i vi·∫øt
    
    Args:
        article_dates (list): Danh s√°ch c√°c datetime object c·ªßa ng√†y t·∫°o b√†i vi·∫øt
        
    Returns:
        int: S·ªë ng√†y li√™n ti·∫øp h·ªçc t·∫≠p (streak days)
        
    V√≠ d·ª•:
        # C√≥ b√†i vi·∫øt: 2024-01-15, 2024-01-14, 2024-01-12 (gap ·ªü ng√†y 13)
        # H√¥m nay: 2024-01-15
        calculate_streak_days(dates) -> 2 (ng√†y 15 + ng√†y 14, d·ª´ng ·ªü ng√†y 13)
    """
    if not article_dates:
        print("üî• STREAK DEBUG: Kh√¥ng c√≥ article_dates")
        return 0
    
    # Chuy·ªÉn th√†nh set c√°c ng√†y (ch·ªâ l·∫•y ph·∫ßn date, b·ªè time) ƒë·ªÉ lookup O(1)
    article_date_set = set()
    for date_obj in article_dates:
        if isinstance(date_obj, datetime):
            article_date_set.add(date_obj.date())
        else:
            article_date_set.add(date_obj)
    
    print(f"üî• STREAK DEBUG: S·ªë b√†i vi·∫øt: {len(article_dates)}")
    print(f"üî• STREAK DEBUG: Ng√†y b√†i vi·∫øt: {sorted(article_date_set, reverse=True)[:10]}")  # 10 ng√†y g·∫ßn nh·∫•t
    
    streak = 0
    current_date = datetime.now().date()
    print(f"üî• STREAK DEBUG: Ng√†y hi·ªán t·∫°i: {current_date}")
    
    # FLEXIBLE MODE - N·∫øu h√¥m nay ch∆∞a vi·∫øt, b·∫Øt ƒë·∫ßu t·ª´ ng√†y g·∫ßn nh·∫•t c√≥ b√†i vi·∫øt
    if current_date not in article_date_set:
        # T√¨m ng√†y g·∫ßn nh·∫•t c√≥ b√†i vi·∫øt
        recent_dates = [d for d in article_date_set if d <= current_date]
        if recent_dates:
            current_date = max(recent_dates)
            print(f"üî• STREAK DEBUG: H√¥m nay ch∆∞a vi·∫øt, b·∫Øt ƒë·∫ßu t·ª´: {current_date}")
        else:
            print(f"üî• STREAK DEBUG: Kh√¥ng c√≥ b√†i vi·∫øt n√†o ‚Üí streak = 0")
            return 0
    
    # ƒê·∫øm streak t·ª´ current_date tr·ªü v·ªÅ tr∆∞·ªõc
    day_counter = 1
    while day_counter <= 365:  # Safety limit ƒë·ªÉ tr√°nh infinite loop
        print(f"üî• STREAK DEBUG: Ki·ªÉm tra ng√†y {day_counter}: {current_date}")
        
        if current_date in article_date_set:
            streak += 1
            print(f"üî• STREAK DEBUG: ‚úÖ C√≥ b√†i vi·∫øt ng√†y {current_date} ‚Üí streak = {streak}")
            # Chuy·ªÉn sang ng√†y tr∆∞·ªõc ƒë√≥
            current_date = current_date - timedelta(days=1)
        else:
            print(f"üî• STREAK DEBUG: ‚ùå Kh√¥ng c√≥ b√†i vi·∫øt ng√†y {current_date} ‚Üí D·ª™NG")
            break
        
        day_counter += 1
    
    print(f"üî• STREAK DEBUG: K·∫øt qu·∫£ cu·ªëi c√πng: streak = {streak}")
    return streak

def calculate_max_historical_streak(article_dates):
    """
    T√≠nh streak t·ªëi ƒëa trong l·ªãch s·ª≠ (kh√¥ng nh·∫•t thi·∫øt ph·∫£i k·∫øt th√∫c ·ªü hi·ªán t·∫°i)
    
    Args:
        article_dates (list): Danh s√°ch c√°c datetime object c·ªßa ng√†y t·∫°o b√†i vi·∫øt
        
    Returns:
        int: Streak t·ªëi ƒëa trong l·ªãch s·ª≠
    """
    if not article_dates:
        return 0
    
    # Chuy·ªÉn th√†nh set c√°c ng√†y duy nh·∫•t
    article_date_set = set()
    for date_obj in article_dates:
        if isinstance(date_obj, datetime):
            article_date_set.add(date_obj.date())
        else:
            article_date_set.add(date_obj)
    
    if not article_date_set:
        return 0
    
    sorted_dates = sorted(article_date_set)
    max_streak = 0
    current_streak = 1
    
    print(f"üèÜ MAX STREAK DEBUG: T·ªïng {len(sorted_dates)} ng√†y c√≥ b√†i vi·∫øt")
    print(f"üèÜ MAX STREAK DEBUG: T·ª´ {sorted_dates[0]} ƒë·∫øn {sorted_dates[-1]}")
    
    for i in range(1, len(sorted_dates)):
        prev_date = sorted_dates[i-1]
        curr_date = sorted_dates[i]
        
        # N·∫øu li√™n ti·∫øp (c√°ch nhau 1 ng√†y)
        if (curr_date - prev_date).days == 1:
            current_streak += 1
            print(f"üèÜ MAX STREAK DEBUG: Ng√†y {curr_date} li√™n ti·∫øp ‚Üí current_streak = {current_streak}")
        else:
            # Reset streak
            print(f"üèÜ MAX STREAK DEBUG: Gap t·ª´ {prev_date} ƒë·∫øn {curr_date} ‚Üí max_streak = {max(max_streak, current_streak)}")
            max_streak = max(max_streak, current_streak)
            current_streak = 1
    
    # Ki·ªÉm tra streak cu·ªëi c√πng
    max_streak = max(max_streak, current_streak)
    print(f"üèÜ MAX STREAK DEBUG: K·∫øt qu·∫£ cu·ªëi c√πng: max_streak = {max_streak}")
    return max_streak

def calculate_total_days(article_dates):
    """
    T√≠nh to√°n t·ªïng s·ªë ng√†y h·ªçc t·∫≠p t·ª´ ng√†y ƒë·∫ßu ti√™n ƒë·∫øn hi·ªán t·∫°i
    
    Thu·∫≠t to√°n:
    1. T√¨m ng√†y ƒë·∫ßu ti√™n c√≥ b√†i vi·∫øt (ng√†y xa nh·∫•t)
    2. T√≠nh s·ªë ng√†y t·ª´ ng√†y ƒë√≥ ƒë·∫øn hi·ªán t·∫°i
    3. Tr·∫£ v·ªÅ t·ªïng s·ªë ng√†y
    
    Args:
        article_dates (list): Danh s√°ch c√°c datetime object c·ªßa ng√†y t·∫°o b√†i vi·∫øt
        
    Returns:
        int: T·ªïng s·ªë ng√†y t·ª´ ng√†y ƒë·∫ßu ti√™n ƒë·∫øn hi·ªán t·∫°i
        
    V√≠ d·ª•:
        # B√†i vi·∫øt ƒë·∫ßu ti√™n: 1/1/2024, h√¥m nay: 15/1/2024
        dates = [datetime(2024,1,1), datetime(2024,1,15)]
        calculate_total_days(dates) -> 14 ng√†y
    """
    if not article_dates:
        return 0
    
    # T√¨m ng√†y ƒë·∫ßu ti√™n (xa nh·∫•t)
    first_date = min(article_dates).date()
    current_date = datetime.now().date()
    
    # T√≠nh s·ªë ng√†y
    total_days = (current_date - first_date).days + 1  # +1 ƒë·ªÉ bao g·ªìm c·∫£ ng√†y ƒë·∫ßu
    
    return max(1, total_days)  # √çt nh·∫•t l√† 1 ng√†y

def scan_domain_folder(domain_path):
    """Scan m·ªôt domain folder v√† tr·∫£ v·ªÅ th√¥ng tin"""
    if not os.path.exists(domain_path):
        return None
    
    domain_name = os.path.basename(domain_path)
    print(f"üìÅ SCAN DEBUG: ƒêang scan domain: {domain_name}")
    articles_count = 0
    total_words = 0
    article_dates = []
    last_activity = None
    
    # Duy·ªát qua t·∫•t c·∫£ file trong domain
    for root, dirs, files in os.walk(domain_path):
        for file in files:
            file_path = os.path.join(root, file)
            file_ext = Path(file).suffix.lower()
            
            if file_ext in SUPPORTED_EXTENSIONS:
                try:
                    # L·∫•y th√¥ng tin file
                    stat_info = os.stat(file_path)
                    creation_time = datetime.fromtimestamp(stat_info.st_ctime)
                    
                    # ƒê·∫øm t·ª´
                    word_count = estimate_word_count(file_path, file_ext)
                    
                    articles_count += 1
                    total_words += word_count
                    article_dates.append(creation_time)
                    
                    print(f"üìÑ FILE DEBUG: {file} - Ng√†y t·∫°o: {creation_time.date()} - T·ª´: {word_count}")
                    
                    if last_activity is None or creation_time > last_activity:
                        last_activity = creation_time
                        
                except Exception as e:
                    print(f"L·ªói khi ƒë·ªçc file {file}: {e}")
    
    # T√≠nh to√°n metrics
    xp = calculate_xp_from_articles(articles_count, total_words)
    level = calculate_level_from_xp(xp)
    streak_days = calculate_streak_days(article_dates)
    max_streak_days = calculate_max_historical_streak(article_dates)
    total_days = calculate_total_days(article_dates)
    
    return {
        'name': domain_name,
        'xp': xp,
        'level': level,
        'color': get_domain_color(domain_name),
        'taskCount': articles_count,  # S·ªë b√†i vi·∫øt
        'streakDays': streak_days,
        'maxStreakDays': max_streak_days,
        'totalDays': total_days,
        'lastTaskDate': last_activity.isoformat() if last_activity else datetime.now().isoformat(),
        'totalWords': total_words,
        'lastActivity': last_activity.isoformat() if last_activity else None
    }

def scan_all_domains():
    """Scan t·∫•t c·∫£ domain folders"""
    domains = {}
    
    if not os.path.exists(DATA_SCIENCE_PATH):
        return domains
    
    # T√¨m t·∫•t c·∫£ domain folders
    for item in os.listdir(DATA_SCIENCE_PATH):
        item_path = os.path.join(DATA_SCIENCE_PATH, item)
        
        if os.path.isdir(item_path) and item.startswith('Domain'):
            domain_data = scan_domain_folder(item_path)
            if domain_data:
                domains[domain_data['name']] = {
                    'xp': domain_data['xp'],
                    'level': domain_data['level'],
                    'color': domain_data['color'],
                    'taskCount': domain_data['taskCount'],
                    'streakDays': domain_data['streakDays'],
                    'maxStreakDays': domain_data['maxStreakDays'],
                    'totalDays': domain_data['totalDays'],
                    'lastTaskDate': domain_data['lastTaskDate']
                }
    
    return domains

@app.get("/")
async def root():
    """API root endpoint"""
    return {
        "message": "Domain Progress Tracker API",
        "version": "1.0.0",
        "docs": "/docs",
        "endpoints": {
            "domains": "/api/domains",
            "refresh": "/api/domains/refresh", 
            "stats": "/api/domains/stats"
        }
    }

@app.get("/api/domains", response_model=DomainsResponse)
async def get_domains():
    """API endpoint ƒë·ªÉ l·∫•y danh s√°ch domains v·ªõi XP/Level"""
    try:
        domains = scan_all_domains()
        
        return DomainsResponse(
            success=True,
            domains=domains,
            count=len(domains),
            last_scan=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/domains/refresh", response_model=DomainsResponse)
async def refresh_domains():
    """API endpoint ƒë·ªÉ refresh domain data"""
    try:
        domains = scan_all_domains()
        
        return DomainsResponse(
            success=True,
            domains=domains,
            count=len(domains),
            last_scan=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/domains/stats", response_model=StatsResponse)
async def get_domain_stats():
    """API endpoint ƒë·ªÉ l·∫•y th·ªëng k√™ t·ªïng quan"""
    try:
        domains = scan_all_domains()
        
        total_articles = sum(domain['taskCount'] for domain in domains.values())
        total_xp = sum(domain['xp'] for domain in domains.values())
        total_levels = sum(domain['level'] for domain in domains.values())
        
        # Domain c√≥ level cao nh·∫•t
        highest_level_domain = max(domains.items(), key=lambda x: x[1]['level']) if domains else None
        
        # Domain c√≥ nhi·ªÅu b√†i vi·∫øt nh·∫•t
        most_articles_domain = max(domains.items(), key=lambda x: x[1]['taskCount']) if domains else None
        
        return StatsResponse(
            success=True,
            stats={
                'total_domains': len(domains),
                'total_articles': total_articles,
                'total_xp': total_xp,
                'total_levels': total_levels,
                'average_level': total_levels / len(domains) if domains else 0,
                'highest_level_domain': highest_level_domain,
                'most_articles_domain': most_articles_domain
            },
            last_scan=datetime.now().isoformat()
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == '__main__':
    import uvicorn
    
    print("üöÄ Starting Domain Progress Tracker Server (FastAPI)...")
    print(f"üìÅ Scanning path: {DATA_SCIENCE_PATH}")
    print("üåê Server will be available at: http://localhost:8000")
    print("üìñ API Documentation: http://localhost:8000/docs")
    print("üìñ API endpoints:")
    print("  - GET /api/domains - Get all domains with XP/Level")
    print("  - POST /api/domains/refresh - Refresh domain data")
    print("  - GET /api/domains/stats - Get domain statistics")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
