
"smart_sources:3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md": {"path":"3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md","last_embed":{"hash":null},"embeddings":{},"last_read":{"hash":"77910286c7da6e9cc437bcaf45eeb9e1ceb44f2caff62310f13c15ae96e1967f","at":1744167862840},"class_name":"SmartSource","outlinks":[{"title":"Welcome to the ü§ó AI Agents Course - Hugging Face Agents Course","target":"https://huggingface.co/learn/agents-course/unit0/introduction","line":1},{"title":"The Top 10 arXiv Papers About AI Agents (especially Voice AI Agents) | Deepgram","target":"https://deepgram.com/learn/top-arxiv-papers-about-ai-agents-and-voice-ai-agents","line":3},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nShort-term memory, or thread -scoped memory, can be recalled at any time from within a single conversational thread with a user. LangGraph manages short- term memory as a part of your agent's 51. State is persisted to a database using a checkpointer so the thread can be resumed at any time. Short-term memory updates when the graph is invoked or a step is completed, and the State is read at the start of each step.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Short,the%20start%20of%20each%20step","line":28},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLangGraph manages short-term memory as part of the agent's state, persisted via thread-scoped checkpoints. This state can normally include the conversation history along with other stateful data, such as uploaded files, retrieved documents, or generated artifacts. By storing these in the graph's state, the bot can access the full context for a given conversation while maintaining separation between different threads.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=LangGraph%20manages%20short,maintaining%20separation%20between%20different%20threads","line":36},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nShort-term memory, or thread -scoped memory, can be recalled at any time from within a single conversational thread with a user. LangGraph manages short- term memory as a part of your agent's 51. State is persisted to a database using a checkpointer so the thread can be resumed at any time. Short-term memory updates when the graph is invoked or a step is completed, and the State is read at the start of each step.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Short,the%20start%20of%20each%20step","line":44},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong conversations pose a challenge to today's LLMs. The full history may not even fit inside an LLM's context window, resulting in an irrecoverable error. Even if your LLM technically supports the full context length, most LLMs still perform poorly over long contexts. They get \"distracted\" by stale or off-topic content, all while suffering from slower response times and higher costs.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long%20conversations%20pose%20a%20challenge,response%20times%20and%20higher%20costs","line":52},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nChat models accept context using messages, which include developer provided instructions (a system message) and user inputs (human messages). In chat applications, messages alternate between human inputs and model responses, resulting in a list of messages that grows longer over time. Because context windows are limited and token-rich message lists can be costly, many applications can benefit from using techniques to manually remove or forget stale information.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Chat%20models%20accept%20context%20using,remove%20or%20forget%20stale%20information","line":60},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nSummarizing past conversations¬∂\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Summarizing%20past%20conversations%C2%B6","line":68},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\ndef summarize_conversation(state: State):\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=def%20summarize_conversation","line":76},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory is shared across conversational threads. It can be recalled at any time and in any thread. Memories are scoped to any custom namespace, not just within a single thread ID. LangGraph provides stores (reference doc) to let you save and recall long-term memories.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memories","line":84},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory in LangGraph allows systems to retain information across different conversations or sessions. Unlike short-term memory, which is thread-\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memory%2C%20which%20is%20thread","line":92},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLangGraph stores long-term memories as JSON documents in a store ( 54). Each memory is organized under a custom `namespace` (similar to a folder) and a distinct `key` (like a filename). Namespaces often include user or org IDs or other labels that makes it easier to organize information. This structure enables hierarchical organization of memories. Cross-namespace searching is then supported through content filters. See the example below for an example.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=LangGraph%20stores%20long,example%20below%20for%20an%20example","line":100},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# InMemoryStore saves data to an in-memory dictionary. Use a DB-backed store in production use. store = InMemoryStore(index={\"embed\": embed, \"dims\": 2}) user_id = \"my-user\" application_context = \"chitchat\" namespace = (user_id, application_context) store.put( namespace, \"a-memory\",\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=,memory","line":108},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nuser_id = \"my-user\" application_context = \"chitchat\" namespace = (user_id, application_context) store.put( namespace, \"a-memory\", { \"rules\": [ \"User likes short, direct language\",\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=user_id%20%3D%20%22my,User%20likes%20short%2C%20direct%20language","line":116},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# get the \"memory\" by ID item = store.get(namespace, \"a-memory\") # search for \"memories\" within this namespace, filtering on content equivalence, sorted by vector similarity items = store.search( namespace, filter={\"my-key\": \"my-value\"}, query=\"language preferences\" )\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=,value%22%7D%2C%20query%3D%22language%20preferences%22","line":124},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory is shared across conversational threads. It can be recalled at any time and in any thread. Memories are scoped to any custom namespace, not just within a single thread ID. LangGraph provides stores ( 54) to let you save and recall long-term memories.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memories","line":132},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nDifferent applications require various types of memory. Although the analogy isn't perfect, examining human memory types can be insightful. Some research (e.g., the CoALA paper) have even mapped these human memory types to those used in AI agents.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Different%20applications%20require%20various%20types,those%20used%20in%20AI%20agents","line":140},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nMemory Type What is Stored Human Example Agent Example Semantic Facts Things I learned in school Facts about a user Episodic Experiences Things I did Past agent actions Procedural Instructions Instincts or motor skills Agent system prompt\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Memory%20Type%20What%20is%20Stored,motor%20skills%20Agent%20system%20prompt","line":148},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nSemantic memory, both in humans and AI agents, involves the retention of specific facts and concepts. In humans, it can include information learned in school and the understanding of concepts and their relationships. For AI agents, semantic memory is often used to personalize applications by remembering facts or concepts from past interactions.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Semantic%20memory%2C%20both%20in%20humans,or%20concepts%20from%20past%20interactions","line":156},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# Profile¬∂\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=","line":164},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nAlternatively, memories can be a collection of documents that are continuously updated and extended over time. Each individual memory can be more narrowly scoped and easier to generate, which means that you're less likely to lose information over time. It's easier for an LLM to generate new objects for new information than reconcile new information with an existing profile. As a result, a document collection tends to lead to higher recall downstream.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Alternatively%2C%20memories%20can%20be%20a,lead%20to%20higher%20recall%20downstream","line":172},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\npairs you've selected to represent your domain.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=pairs%20you%27ve%20selected%20to%20represent,your%20domain","line":180},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nHowever, this shifts some complexity memory updating. The model must now delete or update existing items in the list, which can be tricky. In addition, some models may default to over-inserting and others may default to over-updating. See the Trustcall package for one way to manage this and consider evaluation (e.g., with a tool like LangSmith) to help you tune the behavior.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=However%2C%20this%20shifts%20some%20complexity,help%20you%20tune%20the%20behavior","line":188},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nWhen do you want to update memories?\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=When%20do%20you%20want%20to,update%20memories","line":196},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":204},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":212},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":220},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":228},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":236},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":244},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":252},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":260},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":268},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\nHi this looks interesting. From your description it looks like mem0 remembers details and context of previous chats but not the actual text of chats. Is this a correct assumption?\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=Hi%20this%20looks%20interesting,Is%20this%20a%20correct%20assumption","line":276},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\n3. Content management: Claude has minimum length requirements for caching (1024 characters for Sonnet, 2048 for Haiku). Mem0 can handle information of any length, from short facts to longer contexts. 4. Customization: Developers have greater control over Mem0's memory management, including options for prioritizing or deprioritizing information based on relevance or time. Claude's caching system offers less direct control. 5. Information retrieval: Mem0 is designed for more precise and targeted information retrieval, while Claude's cache works with broader contextual blocks.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=3,works%20with%20broader%20contextual%20blocks","line":284},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":292},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\nAs mentioned in the post, we use a hybrid datastore approach that handles these cases effectively and that's where the graph aspect comes into picture.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=As%20mentioned%20in%20the%20post%2C,graph%20aspect%20comes%20into%20picture","line":300},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":308},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\n1. Purpose and duration: Claude's cache is designed for short-term memory, clearing every 5 minutes. In contrast, Mem0 is built for long-term information storage, retaining data indefinitely unless instructed otherwise. 2. Flexibility and control: Mem0 offers more flexibility, allowing developers to update, delete, or modify stored information as needed. Claude's cache is more static - new information creates additional entries rather than updating existing ones. 3. Content management: Claude has minimum length requirements for caching (1024 characters for Sonnet, 2048 for Haiku). Mem0 can handle information of any length, from short facts to longer contexts. 4. Customization: Developers have\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=1,Customization%3A%20Developers%20have","line":316},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":324},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":332},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":340},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\ndesigned for more precise and targeted information retrieval, while Claude's cache works with broader contextual blocks.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=designed%20for%20more%20precise%20and,works%20with%20broader%20contextual%20blocks","line":348},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":356},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.anthropic.com&sz=32","line":364},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":372},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":380},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":388},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":396},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":404},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.getzep.com&sz=32","line":412},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":420},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":428},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":436},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":444},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":452},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":458},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":464},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":472},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.generational.pub&sz=32","line":480},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":488},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":496},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":504},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":512},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":520},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":528},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":536},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.me.bot&sz=32","line":544},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":552},{"title":"\n\nlangchain-ai.github\n\n5\n\n\n\n","target":"https://langchain-ai.github.io/","line":564},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":572},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":580},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":584},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":592},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":600},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":604},{"title":"\n\nnews.ycombinator\n\n2\n\n\n\n","target":"https://news.ycombinator.com/","line":612},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.cognee.ai&sz=32","line":620},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":624},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":628},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":632},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.anthropic.com&sz=32","line":640},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":651},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":659},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":667},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":675},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":683},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":691},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":699},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":707},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":715},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":723},{"title":"\n\nopenreview.net\n\nLanguage model with Plug-in Knowldge Memory | OpenReview\n\nof knowledge PLM needs to solve certain task. In this paper, we introduce PlugLM, a pre-training model with differentiable plug-in memory(DPM). The key intuition behind is to decouple the knowledge storage from model parameters with an editable and scalable key-value memory and leverage knowledge in an explainable manner by knowledge retrieval in the DPM. We conduct extensive experiments under various settings to justify this design choice. In domain adaptation setting, PlugLM could be easily adapted to different domains with plugable in-domain memory---obtaining 3.95 F1 improvements across four domains, without any in-domain training. PlugLM could also keep absorbing new knowledge\n\n","target":"https://openreview.net/forum?id=Plr5l7r0jY6#:~:text=of%20knowledge%20PLM%20needs%20to,also%20keep%20absorbing%20new%20knowledge","line":731},{"title":"\n\nopenreview.net\n\nLanguage model with Plug-in Knowldge Memory | OpenReview\n\nadaptation setting, PlugLM could be easily adapted to different domains with plugable in-domain memory---obtaining 3.95 F1 improvements across four domains, without any in-domain training. PlugLM could also keep absorbing new knowledge after pre-training is done by knowledge updating operation in the DPM without re-training. Finally, we show that by incorporating training samples into DPM with knowledge prompting, PlugLM could further be improved by the instruction of in-task knowledge.\n\n","target":"https://openreview.net/forum?id=Plr5l7r0jY6#:~:text=adaptation%20setting%2C%20PlugLM%20could%20be,task%20knowledge","line":739},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":747},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":755},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":763},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":771},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":777},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":783},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":789},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":795},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":801},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":809},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":817},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":825},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":833},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://ar5iv.labs.arxiv.org&sz=32","line":841},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":849},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://ar5iv.labs.arxiv.org&sz=32","line":857},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":865},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":873},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":881},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":889},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":897},{"title":"\n\nopenreview.net\n\n200 The event memory module is designed to perceive 201 historical events to generate coherent responses 202 across interval time. As shown in Figure 2, this 203 event memory module is segmented into two major 204 sub-modules that focus separately on long-term 205 and short-term memory. 206 2.2.1 Long-term Memory 207 Memory Storage. The long-term memory mod\u0002208 ule aims to extract and encode events from past 209 sessions. Specifically, this involves recording\n\n","target":"https://openreview.net/pdf?id=lwCxVgVYoK#:~:text=200%20The%20event%20memory%20module,Specifically%2C%20this%20involves%20recording","line":905},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":911},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":919},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":927},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":935},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":943},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":951},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":959},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":967},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":975},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":983},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":991},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":999},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":1007},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":1013},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":1019}],"blocks":{"#":[1,22],"##{1}":[1,1],"##{2}":[2,2],"##{3}":[3,3],"##{4}":[4,22],"#---frontmatter---":[6,22],"#Deep Research: Ngu·ªìn 12/3/2025":[23,1028],"#Deep Research: Ngu·ªìn 12/3/2025#{1}":[25,1028]},"last_import":{"mtime":1742927370448,"size":77901,"at":1744167862859,"hash":"77910286c7da6e9cc437bcaf45eeb9e1ceb44f2caff62310f13c15ae96e1967f"}},
"smart_sources:3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md": {"path":"3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md","embeddings":{"TaylorAI/bge-micro-v2":{"vec":[-0.07748009,0.00461123,0.00970647,0.00504306,0.00702645,0.01041202,0.02288621,0.00937992,0.00790514,-0.03780295,0.04519681,-0.11451377,0.05754739,0.03465701,0.07979873,0.00791923,-0.01273334,0.04105734,0.03089777,-0.03790888,0.05777488,-0.01692244,0.03147583,0.00081607,0.01585486,0.01881445,0.02435541,-0.03702095,0.01828706,-0.18525413,0.02044879,0.04608816,0.00166817,0.03979333,0.03952662,0.00364825,-0.03927936,0.04611579,-0.04201121,0.02061036,0.0217844,-0.02307122,0.00256396,-0.06564596,0.07773326,-0.03337711,0.01333188,-0.04023239,-0.02759956,-0.08937439,-0.02990522,-0.01608326,0.02195681,0.02973584,0.00065747,-0.01423193,0.08077027,0.06364154,0.02056365,0.00112047,0.04834907,0.09069623,-0.21591249,0.10704395,-0.00070714,0.01671842,0.0113047,-0.01492546,0.027219,0.10033141,-0.0549593,-0.00878069,0.00456077,0.00218934,-0.00702413,0.03148947,0.04432361,-0.04563334,-0.00670337,-0.07724629,0.01091277,0.04358765,-0.04337023,-0.01894214,-0.07592262,-0.06807894,0.01730709,-0.04960292,-0.00815574,-0.02701301,-0.00249671,0.03111426,-0.01147957,0.01853907,0.03359108,-0.03493391,0.01073509,0.02181628,-0.10300513,0.10650419,0.03137517,-0.01670551,-0.00224565,-0.00442872,0.01423511,0.01990608,0.02071619,-0.06680655,-0.05233507,0.03064515,-0.05416908,-0.02583892,0.0183251,-0.03679343,-0.02791439,0.04306835,0.05881036,-0.02726481,0.05986323,-0.04242482,0.00014051,-0.02430579,0.04195049,-0.00501408,0.04795153,-0.05808924,0.03711633,0.05520953,-0.00276921,0.04180096,0.08869328,-0.00537063,-0.00928131,-0.02181084,0.01284657,-0.04473077,-0.02313115,-0.01965451,-0.06971055,-0.06186567,-0.04101235,0.01069945,0.03212842,-0.03228061,-0.10647956,0.05009416,-0.04423655,0.00961709,-0.02399239,-0.02569753,0.01729987,0.02124732,0.03770391,-0.00760508,0.00958936,-0.01042019,0.10051803,0.08785349,-0.11582894,0.04344389,0.03372509,-0.0694554,-0.08174479,0.14339688,0.02283421,-0.09307662,-0.03529589,-0.03647851,0.03024175,0.01878027,0.05273103,0.03124757,-0.08046138,-0.01139654,0.03605267,0.01100269,-0.01278171,0.00731215,-0.00205687,-0.00667441,-0.08946829,-0.06337146,0.02360477,0.01709303,-0.00031348,-0.02618176,0.01468482,-0.04693555,0.00258445,-0.04051904,0.00292208,0.05683548,-0.00475961,0.02042479,-0.07087583,0.03556845,0.013196,-0.03941536,-0.01176718,-0.06460138,0.00459615,-0.00630908,-0.02326208,0.01325207,-0.01166278,0.00590039,-0.03848692,-0.00002868,0.06705175,0.02829803,-0.09180021,-0.01238903,0.04329574,-0.02085796,-0.0878,0.03140772,0.02775331,0.03139434,-0.03531973,-0.01236672,0.00532499,0.02665788,-0.06451136,-0.18809161,0.01540248,0.01373678,-0.0434109,0.03766023,-0.04573794,0.06170696,-0.00422969,0.10924111,0.07220324,0.05461568,-0.03640004,-0.00897936,0.05285282,0.02870441,0.04118485,0.02550662,0.07336504,-0.00961134,0.03462407,0.01182067,0.00900566,-0.07127611,-0.09780201,0.01648995,0.0322934,0.15561488,0.0032944,0.01417397,0.03697067,0.01142824,0.00571803,-0.03468476,-0.13014132,0.10864089,0.00490246,0.04145118,-0.01924469,-0.00878733,-0.06606138,-0.03747198,0.05861456,-0.03312697,-0.06226467,-0.04462125,-0.04357397,-0.03532162,0.01023551,-0.08574343,-0.00645724,0.05523359,0.03570801,-0.04814416,0.01039859,-0.02909102,-0.02025325,-0.03985588,0.00095831,-0.03037108,0.0568902,0.01177929,-0.01062489,-0.00143875,-0.02188752,0.00584866,-0.01962865,0.04892154,0.01475042,0.03893235,0.0275773,-0.05060364,0.12707086,0.05429109,-0.00429412,0.06879857,-0.04861749,0.03032383,-0.04296349,0.02663347,0.00268314,0.02075997,-0.03188,-0.00062237,0.00811995,0.03865354,0.01447715,0.04383321,-0.03185018,0.05902965,0.06021473,0.01447,0.03027759,-0.0281199,-0.02004198,0.0963211,-0.04441435,-0.26775444,0.01175336,0.01865098,0.07383152,-0.00996134,-0.02717507,-0.00195144,-0.04899682,-0.03634226,-0.01108623,0.02809484,0.01326336,0.00269809,-0.00751139,-0.01613537,0.01147965,0.05633275,-0.05372229,0.05550643,-0.00452855,-0.04218697,-0.00862633,0.20033307,-0.03025044,0.03524956,0.03525212,-0.02794397,-0.03723397,-0.01459379,-0.07224119,0.00456236,0.00478548,0.1094512,-0.04752798,0.01653668,0.14028461,-0.06907298,0.0058417,0.01064112,0.06399666,0.00653514,0.035213,-0.00633527,0.01562693,0.07190231,0.00438307,-0.01725184,-0.06455911,-0.06107667,0.02874567,0.03003178,-0.05305052,-0.05054389,-0.03691491,0.05659219,0.04579701,-0.00936207,-0.02341055,-0.03660984,-0.01141181,0.01844018,-0.00982061,0.04717327,0.06291469,0.0156114],"last_embed":{"hash":"77910286c7da6e9cc437bcaf45eeb9e1ceb44f2caff62310f13c15ae96e1967f","tokens":462}}},"last_read":{"hash":"77910286c7da6e9cc437bcaf45eeb9e1ceb44f2caff62310f13c15ae96e1967f","at":1744168020039},"class_name":"SmartSource","outlinks":[{"title":"Welcome to the ü§ó AI Agents Course - Hugging Face Agents Course","target":"https://huggingface.co/learn/agents-course/unit0/introduction","line":1},{"title":"The Top 10 arXiv Papers About AI Agents (especially Voice AI Agents) | Deepgram","target":"https://deepgram.com/learn/top-arxiv-papers-about-ai-agents-and-voice-ai-agents","line":3},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nShort-term memory, or thread -scoped memory, can be recalled at any time from within a single conversational thread with a user. LangGraph manages short- term memory as a part of your agent's 51. State is persisted to a database using a checkpointer so the thread can be resumed at any time. Short-term memory updates when the graph is invoked or a step is completed, and the State is read at the start of each step.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Short,the%20start%20of%20each%20step","line":28},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLangGraph manages short-term memory as part of the agent's state, persisted via thread-scoped checkpoints. This state can normally include the conversation history along with other stateful data, such as uploaded files, retrieved documents, or generated artifacts. By storing these in the graph's state, the bot can access the full context for a given conversation while maintaining separation between different threads.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=LangGraph%20manages%20short,maintaining%20separation%20between%20different%20threads","line":36},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nShort-term memory, or thread -scoped memory, can be recalled at any time from within a single conversational thread with a user. LangGraph manages short- term memory as a part of your agent's 51. State is persisted to a database using a checkpointer so the thread can be resumed at any time. Short-term memory updates when the graph is invoked or a step is completed, and the State is read at the start of each step.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Short,the%20start%20of%20each%20step","line":44},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong conversations pose a challenge to today's LLMs. The full history may not even fit inside an LLM's context window, resulting in an irrecoverable error. Even if your LLM technically supports the full context length, most LLMs still perform poorly over long contexts. They get \"distracted\" by stale or off-topic content, all while suffering from slower response times and higher costs.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long%20conversations%20pose%20a%20challenge,response%20times%20and%20higher%20costs","line":52},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nChat models accept context using messages, which include developer provided instructions (a system message) and user inputs (human messages). In chat applications, messages alternate between human inputs and model responses, resulting in a list of messages that grows longer over time. Because context windows are limited and token-rich message lists can be costly, many applications can benefit from using techniques to manually remove or forget stale information.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Chat%20models%20accept%20context%20using,remove%20or%20forget%20stale%20information","line":60},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nSummarizing past conversations¬∂\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Summarizing%20past%20conversations%C2%B6","line":68},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\ndef summarize_conversation(state: State):\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=def%20summarize_conversation","line":76},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory is shared across conversational threads. It can be recalled at any time and in any thread. Memories are scoped to any custom namespace, not just within a single thread ID. LangGraph provides stores (reference doc) to let you save and recall long-term memories.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memories","line":84},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory in LangGraph allows systems to retain information across different conversations or sessions. Unlike short-term memory, which is thread-\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memory%2C%20which%20is%20thread","line":92},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLangGraph stores long-term memories as JSON documents in a store ( 54). Each memory is organized under a custom `namespace` (similar to a folder) and a distinct `key` (like a filename). Namespaces often include user or org IDs or other labels that makes it easier to organize information. This structure enables hierarchical organization of memories. Cross-namespace searching is then supported through content filters. See the example below for an example.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=LangGraph%20stores%20long,example%20below%20for%20an%20example","line":100},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# InMemoryStore saves data to an in-memory dictionary. Use a DB-backed store in production use. store = InMemoryStore(index={\"embed\": embed, \"dims\": 2}) user_id = \"my-user\" application_context = \"chitchat\" namespace = (user_id, application_context) store.put( namespace, \"a-memory\",\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=,memory","line":108},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nuser_id = \"my-user\" application_context = \"chitchat\" namespace = (user_id, application_context) store.put( namespace, \"a-memory\", { \"rules\": [ \"User likes short, direct language\",\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=user_id%20%3D%20%22my,User%20likes%20short%2C%20direct%20language","line":116},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# get the \"memory\" by ID item = store.get(namespace, \"a-memory\") # search for \"memories\" within this namespace, filtering on content equivalence, sorted by vector similarity items = store.search( namespace, filter={\"my-key\": \"my-value\"}, query=\"language preferences\" )\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=,value%22%7D%2C%20query%3D%22language%20preferences%22","line":124},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory is shared across conversational threads. It can be recalled at any time and in any thread. Memories are scoped to any custom namespace, not just within a single thread ID. LangGraph provides stores ( 54) to let you save and recall long-term memories.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memories","line":132},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nDifferent applications require various types of memory. Although the analogy isn't perfect, examining human memory types can be insightful. Some research (e.g., the CoALA paper) have even mapped these human memory types to those used in AI agents.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Different%20applications%20require%20various%20types,those%20used%20in%20AI%20agents","line":140},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nMemory Type What is Stored Human Example Agent Example Semantic Facts Things I learned in school Facts about a user Episodic Experiences Things I did Past agent actions Procedural Instructions Instincts or motor skills Agent system prompt\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Memory%20Type%20What%20is%20Stored,motor%20skills%20Agent%20system%20prompt","line":148},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nSemantic memory, both in humans and AI agents, involves the retention of specific facts and concepts. In humans, it can include information learned in school and the understanding of concepts and their relationships. For AI agents, semantic memory is often used to personalize applications by remembering facts or concepts from past interactions.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Semantic%20memory%2C%20both%20in%20humans,or%20concepts%20from%20past%20interactions","line":156},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# Profile¬∂\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=","line":164},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nAlternatively, memories can be a collection of documents that are continuously updated and extended over time. Each individual memory can be more narrowly scoped and easier to generate, which means that you're less likely to lose information over time. It's easier for an LLM to generate new objects for new information than reconcile new information with an existing profile. As a result, a document collection tends to lead to higher recall downstream.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Alternatively%2C%20memories%20can%20be%20a,lead%20to%20higher%20recall%20downstream","line":172},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\npairs you've selected to represent your domain.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=pairs%20you%27ve%20selected%20to%20represent,your%20domain","line":180},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nHowever, this shifts some complexity memory updating. The model must now delete or update existing items in the list, which can be tricky. In addition, some models may default to over-inserting and others may default to over-updating. See the Trustcall package for one way to manage this and consider evaluation (e.g., with a tool like LangSmith) to help you tune the behavior.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=However%2C%20this%20shifts%20some%20complexity,help%20you%20tune%20the%20behavior","line":188},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nWhen do you want to update memories?\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=When%20do%20you%20want%20to,update%20memories","line":196},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":204},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":212},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":220},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":228},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":236},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":244},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":252},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":260},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":268},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\nHi this looks interesting. From your description it looks like mem0 remembers details and context of previous chats but not the actual text of chats. Is this a correct assumption?\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=Hi%20this%20looks%20interesting,Is%20this%20a%20correct%20assumption","line":276},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\n3. Content management: Claude has minimum length requirements for caching (1024 characters for Sonnet, 2048 for Haiku). Mem0 can handle information of any length, from short facts to longer contexts. 4. Customization: Developers have greater control over Mem0's memory management, including options for prioritizing or deprioritizing information based on relevance or time. Claude's caching system offers less direct control. 5. Information retrieval: Mem0 is designed for more precise and targeted information retrieval, while Claude's cache works with broader contextual blocks.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=3,works%20with%20broader%20contextual%20blocks","line":284},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":292},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\nAs mentioned in the post, we use a hybrid datastore approach that handles these cases effectively and that's where the graph aspect comes into picture.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=As%20mentioned%20in%20the%20post%2C,graph%20aspect%20comes%20into%20picture","line":300},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":308},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\n1. Purpose and duration: Claude's cache is designed for short-term memory, clearing every 5 minutes. In contrast, Mem0 is built for long-term information storage, retaining data indefinitely unless instructed otherwise. 2. Flexibility and control: Mem0 offers more flexibility, allowing developers to update, delete, or modify stored information as needed. Claude's cache is more static - new information creates additional entries rather than updating existing ones. 3. Content management: Claude has minimum length requirements for caching (1024 characters for Sonnet, 2048 for Haiku). Mem0 can handle information of any length, from short facts to longer contexts. 4. Customization: Developers have\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=1,Customization%3A%20Developers%20have","line":316},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":324},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":332},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":340},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\ndesigned for more precise and targeted information retrieval, while Claude's cache works with broader contextual blocks.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=designed%20for%20more%20precise%20and,works%20with%20broader%20contextual%20blocks","line":348},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":356},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.anthropic.com&sz=32","line":364},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":372},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":380},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":388},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":396},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":404},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.getzep.com&sz=32","line":412},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":420},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":428},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":436},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":444},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":452},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":458},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":464},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":472},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.generational.pub&sz=32","line":480},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":488},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":496},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":504},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":512},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":520},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":528},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":536},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.me.bot&sz=32","line":544},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":552},{"title":"\n\nlangchain-ai.github\n\n5\n\n\n\n","target":"https://langchain-ai.github.io/","line":564},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":572},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":580},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":584},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":592},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":600},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":604},{"title":"\n\nnews.ycombinator\n\n2\n\n\n\n","target":"https://news.ycombinator.com/","line":612},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.cognee.ai&sz=32","line":620},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":624},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":628},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":632},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.anthropic.com&sz=32","line":640},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":651},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":659},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":667},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":675},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":683},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":691},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":699},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":707},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":715},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":723},{"title":"\n\nopenreview.net\n\nLanguage model with Plug-in Knowldge Memory | OpenReview\n\nof knowledge PLM needs to solve certain task. In this paper, we introduce PlugLM, a pre-training model with differentiable plug-in memory(DPM). The key intuition behind is to decouple the knowledge storage from model parameters with an editable and scalable key-value memory and leverage knowledge in an explainable manner by knowledge retrieval in the DPM. We conduct extensive experiments under various settings to justify this design choice. In domain adaptation setting, PlugLM could be easily adapted to different domains with plugable in-domain memory---obtaining 3.95 F1 improvements across four domains, without any in-domain training. PlugLM could also keep absorbing new knowledge\n\n","target":"https://openreview.net/forum?id=Plr5l7r0jY6#:~:text=of%20knowledge%20PLM%20needs%20to,also%20keep%20absorbing%20new%20knowledge","line":731},{"title":"\n\nopenreview.net\n\nLanguage model with Plug-in Knowldge Memory | OpenReview\n\nadaptation setting, PlugLM could be easily adapted to different domains with plugable in-domain memory---obtaining 3.95 F1 improvements across four domains, without any in-domain training. PlugLM could also keep absorbing new knowledge after pre-training is done by knowledge updating operation in the DPM without re-training. Finally, we show that by incorporating training samples into DPM with knowledge prompting, PlugLM could further be improved by the instruction of in-task knowledge.\n\n","target":"https://openreview.net/forum?id=Plr5l7r0jY6#:~:text=adaptation%20setting%2C%20PlugLM%20could%20be,task%20knowledge","line":739},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":747},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":755},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":763},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":771},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":777},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":783},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":789},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":795},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":801},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":809},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":817},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":825},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":833},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://ar5iv.labs.arxiv.org&sz=32","line":841},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":849},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://ar5iv.labs.arxiv.org&sz=32","line":857},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":865},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":873},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":881},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":889},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":897},{"title":"\n\nopenreview.net\n\n200 The event memory module is designed to perceive 201 historical events to generate coherent responses 202 across interval time. As shown in Figure 2, this 203 event memory module is segmented into two major 204 sub-modules that focus separately on long-term 205 and short-term memory. 206 2.2.1 Long-term Memory 207 Memory Storage. The long-term memory mod\u0002208 ule aims to extract and encode events from past 209 sessions. Specifically, this involves recording\n\n","target":"https://openreview.net/pdf?id=lwCxVgVYoK#:~:text=200%20The%20event%20memory%20module,Specifically%2C%20this%20involves%20recording","line":905},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":911},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":919},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":927},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":935},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":943},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":951},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":959},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":967},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":975},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":983},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":991},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":999},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":1007},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":1013},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":1019}],"blocks":{"#":[1,22],"##{1}":[1,1],"##{2}":[2,2],"##{3}":[3,3],"##{4}":[4,22],"#---frontmatter---":[6,22],"#Deep Research: Ngu·ªìn 12/3/2025":[23,1028],"#Deep Research: Ngu·ªìn 12/3/2025#{1}":[25,1028]},"last_import":{"mtime":1742927370448,"size":77901,"at":1744167862859,"hash":"77910286c7da6e9cc437bcaf45eeb9e1ceb44f2caff62310f13c15ae96e1967f"}},"smart_blocks:3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md#": {"path":null,"embeddings":{"TaylorAI/bge-micro-v2":{"vec":[-0.07832178,0.00504198,0.00795388,0.00586652,0.00496811,0.01037511,0.02431896,0.00835476,0.00833072,-0.03684565,0.04499377,-0.11499932,0.05608719,0.03632491,0.0802872,0.00724279,-0.01131104,0.03930826,0.03241485,-0.0377017,0.0569781,-0.01526213,0.03133302,0.00130004,0.01515042,0.01836553,0.0258943,-0.03895423,0.01677494,-0.18381982,0.01987276,0.04605158,0.00252186,0.04303095,0.03725484,0.00588005,-0.03721469,0.04811471,-0.0408775,0.02144875,0.02315661,-0.02284523,0.00436598,-0.06219846,0.07809405,-0.03504809,0.00956629,-0.03930331,-0.02790068,-0.08891398,-0.02981177,-0.0148752,0.02319498,0.02840103,0.00209985,-0.01397871,0.08068858,0.06320248,0.02045823,0.00254638,0.04632155,0.08941581,-0.21504997,0.10862552,-0.00388742,0.01500585,0.0125213,-0.01563941,0.02780362,0.0971806,-0.0541684,-0.00948216,0.00536245,0.00026123,-0.00556257,0.03191447,0.04680131,-0.04537877,-0.00529805,-0.07712007,0.00887053,0.04325176,-0.04429565,-0.02150298,-0.07698973,-0.06839498,0.01902086,-0.04865225,-0.00757247,-0.02822128,-0.00164018,0.02854125,-0.01204014,0.01970904,0.03419318,-0.03691803,0.01017626,0.02382714,-0.10115093,0.10798893,0.03078836,-0.01722009,-0.00470841,-0.00368792,0.01300441,0.02072111,0.02140495,-0.06746926,-0.05382085,0.03101791,-0.05423175,-0.02643707,0.01891514,-0.03473289,-0.02688524,0.04433475,0.05824573,-0.02642821,0.06186651,-0.04464358,0.0010704,-0.02487305,0.0406735,-0.00410482,0.04659544,-0.05740852,0.03953619,0.05796885,-0.00611163,0.04409732,0.08807817,-0.00491528,-0.01180968,-0.021321,0.00992158,-0.04474486,-0.02490112,-0.01851073,-0.07113811,-0.06101651,-0.04366544,0.01012432,0.03278893,-0.03303967,-0.10575385,0.0486256,-0.04336742,0.01121273,-0.02457136,-0.02662683,0.01851608,0.02291549,0.03788942,-0.00661381,0.01002585,-0.0121759,0.09905381,0.08699978,-0.1139795,0.04245781,0.03708616,-0.07001549,-0.08209916,0.14078636,0.02139807,-0.09448861,-0.03612797,-0.03739135,0.03094823,0.02022509,0.05358095,0.02910035,-0.07813513,-0.00899086,0.03532933,0.01366046,-0.01192793,0.00545803,-0.00241746,-0.00791017,-0.08969927,-0.06333062,0.0218504,0.01729551,-0.00071068,-0.02722195,0.01466997,-0.04818018,0.00500776,-0.04186975,0.00315263,0.05492536,-0.00560282,0.02091999,-0.07113681,0.03503354,0.01180637,-0.03890343,-0.01195877,-0.06669985,0.00601852,-0.00620669,-0.02730615,0.01451647,-0.01053852,0.00678138,-0.04074935,-0.0005194,0.06819987,0.02746101,-0.09063113,-0.01283102,0.04475374,-0.02313839,-0.08746933,0.02988476,0.0291114,0.0317208,-0.03465978,-0.01238516,0.00473551,0.02748777,-0.06441514,-0.1891529,0.01654719,0.01374026,-0.04421627,0.03810066,-0.04676808,0.06461784,-0.0036291,0.1103948,0.07372046,0.05378369,-0.03597487,-0.00938773,0.05376994,0.02734645,0.0414528,0.02376146,0.07420168,-0.00598313,0.03055467,0.01292302,0.01016268,-0.07365081,-0.09992664,0.01817628,0.03261454,0.15276212,0.00649346,0.01686035,0.03759334,0.01125779,0.00494566,-0.03309771,-0.1319049,0.10539569,0.00354519,0.04131811,-0.02016596,-0.01083598,-0.06593671,-0.03451982,0.05762674,-0.03028446,-0.06231507,-0.04563515,-0.04224937,-0.03826035,0.01075414,-0.08782012,-0.00580891,0.05667529,0.03619725,-0.04920352,0.01185244,-0.02950128,-0.02420634,-0.03895248,0.00009616,-0.02853129,0.05648373,0.01247627,-0.01046876,0.00128962,-0.0213008,0.00557924,-0.01631503,0.04565173,0.01500824,0.03938572,0.02838213,-0.05117629,0.12661177,0.05264826,-0.00352137,0.06647398,-0.0501637,0.03212721,-0.04303877,0.02405704,0.00361644,0.01878722,-0.02886508,-0.00225431,0.00818261,0.03794164,0.0159092,0.04416735,-0.03070885,0.06010078,0.06214811,0.01515623,0.03001769,-0.02773501,-0.02257545,0.09790299,-0.04450922,-0.26684493,0.01223333,0.01841995,0.07495237,-0.01343614,-0.02594834,-0.00195042,-0.04815098,-0.03559761,-0.01146625,0.02680681,0.0129328,0.00300726,-0.00872219,-0.01863626,0.01096461,0.05506825,-0.0554158,0.05706053,-0.00282791,-0.04009593,-0.00766206,0.20201151,-0.03316251,0.03388983,0.03427828,-0.02825625,-0.03784711,-0.01395996,-0.07004516,0.00645928,0.00438993,0.10857055,-0.04652817,0.01478549,0.13993309,-0.06976707,0.00662349,0.01098432,0.06355099,0.00701033,0.03697752,-0.00560415,0.01512272,0.07311313,0.00504188,-0.01760711,-0.06355194,-0.06251146,0.02691329,0.03070042,-0.05288943,-0.04971004,-0.03752134,0.05492936,0.04690019,-0.01158877,-0.02455558,-0.03633216,-0.00896923,0.02005502,-0.00869758,0.0472316,0.06145379,0.01710056],"last_embed":{"hash":"2cd33792ad15134464074f921aafc4e227ea76dceb36c169aa8126ca22134096","tokens":461}}},"text":null,"length":0,"last_read":{"hash":"2cd33792ad15134464074f921aafc4e227ea76dceb36c169aa8126ca22134096","at":1744168019511},"key":"3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md#","lines":[1,22],"size":1893,"outlinks":[{"title":"Welcome to the ü§ó AI Agents Course - Hugging Face Agents Course","target":"https://huggingface.co/learn/agents-course/unit0/introduction","line":1},{"title":"The Top 10 arXiv Papers About AI Agents (especially Voice AI Agents) | Deepgram","target":"https://deepgram.com/learn/top-arxiv-papers-about-ai-agents-and-voice-ai-agents","line":3}],"class_name":"SmartBlock"},
"smart_blocks:3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md##{4}": {"path":null,"embeddings":{"TaylorAI/bge-micro-v2":{"vec":[-0.0659096,0.04330776,0.00842092,0.01587369,-0.00995271,0.02757114,0.05076424,0.0082769,0.03138066,-0.04702307,0.03804852,-0.10590624,0.07644111,0.06576602,0.06282041,0.00939438,-0.02479496,0.04577142,0.05796413,-0.06051284,0.06975102,-0.02941589,0.00333354,0.02449369,-0.00971902,0.00548985,0.00492641,-0.0064813,-0.00341416,-0.19896527,0.0207816,0.05963051,-0.02256762,0.01822972,0.00972659,-0.00594458,-0.03461387,0.00590282,-0.04076943,0.0108408,0.05644746,0.01139399,0.0001094,-0.06138251,0.06946759,-0.06077295,0.01683962,-0.01692229,-0.04118053,-0.04385192,0.00200597,0.02650853,0.04780941,0.01298863,0.02734494,-0.00097962,0.05061258,0.08514043,0.02608042,-0.03403253,0.10087461,0.0909839,-0.22052293,0.07632019,0.01630353,0.03709881,0.00073188,-0.03670656,0.03485677,0.07326978,-0.04307586,0.01192457,0.00670308,0.03702376,0.02525691,0.03019991,0.01582011,-0.03964724,-0.00305072,-0.06842601,0.0466422,0.03601636,-0.05825076,-0.01671275,-0.07935748,-0.05514748,-0.00734894,-0.03435941,0.02002682,-0.04227199,0.02862518,0.04802549,0.01752254,0.03303069,0.02844664,0.0011605,0.03365601,0.02994479,-0.13747403,0.11410642,0.02801117,-0.01522527,0.03601426,-0.03179369,0.01741823,0.0190988,0.00208424,-0.06628717,-0.04094486,0.02387813,-0.04538713,-0.02244226,0.01171231,-0.01982894,-0.00281296,0.04141938,0.04828305,-0.02104751,0.04974415,-0.03005162,-0.02415901,0.00647258,0.01966657,-0.02124378,0.02821673,-0.03791154,0.02712434,0.06379735,0.0033529,0.01833637,0.06954363,-0.00584977,0.00579277,-0.0252896,0.02415026,-0.03110819,-0.02366865,-0.05906013,-0.05803695,-0.09838231,-0.06307067,0.01112869,0.05821811,-0.03678456,-0.10636208,0.04581424,-0.01153105,0.01940011,-0.03732374,-0.01138971,0.00821872,0.02554518,0.02602998,-0.03700825,-0.00301347,0.00862924,0.04752224,0.08365153,-0.09950418,0.03327244,-0.00892675,-0.04008402,-0.06375596,0.14653572,-0.02098688,-0.09132238,-0.02507923,-0.00790637,0.03938653,0.00308863,0.0546832,0.049652,-0.13274781,-0.03781946,0.02625561,-0.00443184,-0.02969261,-0.002393,-0.01593983,-0.01032165,-0.06585587,-0.03934737,0.01567478,0.0201031,0.03168218,-0.02460995,0.02114788,-0.00407575,0.02025381,-0.01813108,-0.01897663,0.06975826,0.01882774,0.00749503,-0.05705627,0.00948059,0.01554125,-0.04895933,-0.0038801,-0.05427539,0.04237369,-0.01050211,-0.02877732,0.00608196,-0.00469677,-0.03593526,-0.05308881,-0.01070378,0.04093414,0.04972361,-0.05941014,-0.02414689,0.04594629,-0.00166991,-0.09953704,0.01481279,0.00066639,0.0387055,-0.00722347,0.02716514,0.02317295,0.02554533,-0.04794502,-0.18832278,-0.03103361,0.01302961,-0.02555469,0.06504191,-0.05942095,0.01499128,-0.01023307,0.08692952,0.03519084,0.02298879,-0.03268544,-0.03463408,0.06022649,0.00645752,0.03790992,0.02344166,0.05870378,0.00769435,0.05277472,0.00365439,0.00827319,-0.0604794,-0.11994563,0.01875732,0.01842954,0.16625836,-0.03465069,0.01790611,0.04185252,0.02386859,-0.01062215,-0.00957715,-0.09713162,0.0992202,0.00553995,0.005621,0.01928034,0.02432407,-0.04143561,-0.04707666,0.0391074,-0.03154633,-0.1011816,-0.02721749,-0.05610323,-0.04453379,0.00738961,-0.08068054,0.00713971,0.0280792,0.02697691,-0.02005402,0.00821716,-0.0151017,-0.02732337,-0.03680434,0.00910192,-0.03604613,0.05239502,0.00431524,-0.04261401,-0.0124744,0.02157687,0.03763467,-0.05778017,0.04727686,0.01647075,0.00919071,0.02027253,-0.04438487,0.12556894,0.03986973,-0.01485781,0.07703859,-0.02497204,0.00980489,-0.066067,0.01669658,0.00821403,-0.00145959,-0.0438728,0.01773922,0.00775465,0.04210609,-0.00201333,0.04337369,-0.03294994,0.05525472,0.05547236,-0.00546698,0.00998064,-0.03889947,0.00516749,0.05521185,-0.04150151,-0.27586254,0.02304268,0.00817376,0.05825673,-0.00545046,-0.01996808,-0.01187677,-0.02819701,-0.04004325,0.0217521,0.01069745,0.01933161,0.00962269,-0.01058083,-0.00005264,-0.00397359,0.04469491,-0.05172734,0.07442799,-0.01369318,-0.03994973,-0.00182831,0.20356581,-0.02672569,0.04074261,0.06412727,-0.00515158,-0.02147952,0.00854907,-0.05341335,0.00316897,0.00689916,0.12491261,-0.06185472,0.03031023,0.13101472,-0.07506126,-0.0188439,0.02713246,0.05288611,0.00079271,0.05154395,-0.04728126,0.00864676,0.10129337,0.02331668,-0.02121425,-0.07476155,-0.04841824,0.0252519,-0.01028081,-0.05959152,-0.06189338,-0.03196075,0.08856133,0.0320152,-0.0084623,-0.01869958,-0.05123688,-0.01243552,-0.01506735,-0.01449328,0.060713,0.03626813,-0.004112],"last_embed":{"hash":"0b3f56955e4d7bfbe7776415ea70d9254b5780f1610f87d5b969d640fe3688f0","tokens":459}}},"text":null,"length":0,"last_read":{"hash":"0b3f56955e4d7bfbe7776415ea70d9254b5780f1610f87d5b969d640fe3688f0","at":1744168019623},"key":"3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md##{4}","lines":[4,22],"size":1560,"outlinks":[],"class_name":"SmartBlock"},
"smart_blocks:3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md#---frontmatter---": {"path":null,"embeddings":{"TaylorAI/bge-micro-v2":{"vec":[-0.0588086,0.05311034,0.01733669,0.00774631,-0.00572109,0.02118466,0.05680924,0.01228092,0.0607099,-0.04114788,0.0318034,-0.12506323,0.08043236,0.05675478,0.05287182,0.00949039,-0.01649541,0.04440527,0.05609032,-0.05063312,0.05631638,-0.03926788,0.01530811,0.03529687,0.00458774,-0.00047561,-0.0076048,0.00601277,-0.00481348,-0.19239032,0.01467454,0.05237246,-0.01978082,0.01739399,0.01228829,-0.00778424,-0.01462292,0.00610396,-0.03869879,0.02288377,0.05748643,0.02264886,-0.00970846,-0.05563241,0.06831028,-0.06760648,0.01083173,-0.02884733,-0.02000219,-0.04672417,-0.00869922,0.0183536,0.03738885,0.01288197,0.03009432,0.00618742,0.04423204,0.06220046,0.01831407,-0.03932761,0.09399153,0.0934756,-0.23878716,0.08053158,0.01763002,0.0269607,0.0110194,-0.02904904,0.03546363,0.08419286,-0.05615305,0.00711238,0.00529901,0.0313221,0.03095795,0.01864003,0.01646622,-0.02076455,-0.00434884,-0.06549738,0.03705349,0.05071848,-0.04382325,-0.02855038,-0.0596875,-0.06952693,0.00809564,-0.03084986,0.01582604,-0.03319069,0.03034037,0.02511241,0.00055563,0.0377563,0.01746824,-0.00622312,0.03583216,0.04133972,-0.14768864,0.11327869,0.00852481,-0.01010579,0.0250038,-0.02359359,0.024431,0.02624974,0.00794154,-0.06348246,-0.04086592,0.03905099,-0.05270299,-0.0203142,0.01415158,-0.02068661,0.01826104,0.0516118,0.05723862,-0.02167444,0.02328593,-0.03067323,-0.02238824,0.00997519,0.00734873,-0.02502601,0.01814331,-0.04168468,0.02277531,0.07025714,0.00983917,0.01013273,0.05908698,-0.0135657,0.00546543,-0.01869689,0.00788608,-0.03282627,-0.01654717,-0.05815873,-0.0715299,-0.10803689,-0.04999444,-0.0050795,0.03153691,-0.02596026,-0.1143355,0.03942212,0.00062177,0.00932705,-0.03821808,-0.01637185,0.01401416,0.01509762,0.03813225,-0.03367813,-0.01634154,0.00209464,0.06188524,0.1055655,-0.08466265,0.03424888,0.00498835,-0.05121869,-0.06296756,0.13167331,-0.01797099,-0.08247427,-0.02519542,-0.01577664,0.04776902,-0.01765807,0.06243162,0.06782353,-0.11634604,-0.04652519,0.02104831,0.02178095,-0.01697217,-0.00315719,-0.00634822,-0.02257365,-0.06846888,-0.05201645,0.00858057,0.03846906,0.03547915,-0.03534833,0.00420495,0.00022253,0.01703812,-0.00349903,-0.02795828,0.07511215,0.01774207,0.00278531,-0.07888589,-0.00572267,0.00516307,-0.04221248,-0.01944198,-0.06293753,0.05638748,-0.02390634,-0.04914581,0.01797814,-0.00157155,-0.02556236,-0.05190435,-0.01574494,0.02823868,0.05175456,-0.0526306,-0.01652896,0.03052656,-0.00713526,-0.07592292,0.0261027,0.00462763,0.03900588,-0.01044963,0.00680714,0.01684345,0.01363315,-0.04353661,-0.18971451,-0.01539141,0.01903098,-0.02227214,0.07909154,-0.04736917,0.01497723,-0.00121482,0.08034182,0.03422401,0.01023675,-0.0270156,-0.03959925,0.06001502,-0.01615571,0.02844906,0.04232703,0.06153264,0.01717658,0.04142456,0.00181679,0.01643246,-0.07883642,-0.11064549,0.02596801,0.02417206,0.16908956,-0.00698732,0.00113685,0.03478268,0.0426791,-0.00492047,-0.00513872,-0.09383518,0.11382595,0.01980828,-0.00085655,0.01897887,0.01477992,-0.04335705,-0.03172182,0.04429942,-0.03195748,-0.09970664,-0.03106714,-0.04668285,-0.0568961,0.00867233,-0.08498476,0.01207491,0.02957537,0.04068376,-0.00067065,0.0192755,0.0065555,-0.01907352,-0.02511806,0.00843963,-0.03311384,0.05329407,-0.006038,-0.03258609,0.00653561,0.01574669,0.0235369,-0.04980462,0.04916688,0.01116235,0.01074314,0.03709148,-0.04291549,0.1048428,0.03400217,-0.01296952,0.08017293,-0.02252056,0.00129466,-0.07452208,0.02718698,0.01873544,-0.01017231,-0.04529592,0.02031709,-0.00154846,0.02944564,-0.00477892,0.04004341,-0.0164436,0.05499389,0.04748872,0.00064256,0.00727428,-0.03072829,0.00016636,0.04215811,-0.04717944,-0.28727165,0.02204495,-0.01314148,0.06366602,-0.00515824,0.00085135,-0.00263267,-0.02048228,-0.03312541,0.02832826,0.0237412,0.02058979,-0.00331325,-0.0176041,-0.01647504,-0.01339763,0.04247768,-0.05499586,0.07128201,0.0052482,-0.03483832,-0.01796846,0.19892901,-0.02136109,0.02485095,0.06121175,0.00884774,0.00448275,0.01262243,-0.05155053,-0.00745055,0.0087285,0.14075141,-0.06177291,0.02605667,0.13238741,-0.08638728,-0.01568361,0.0313756,0.05691941,0.00753145,0.04805905,-0.05630045,0.00773777,0.10086679,0.01827529,-0.01263997,-0.07274268,-0.04135344,0.00484836,-0.01095287,-0.05088776,-0.05858961,-0.03994187,0.07798529,0.02430589,-0.02436051,-0.03795632,-0.03609002,-0.0127927,-0.03761288,-0.01987095,0.06211698,0.0199966,-0.00788311],"last_embed":{"hash":"2d586d1570895916d8c9fb9d184b037cc204dd71c92c6d2a98c76e1b664d3709","tokens":457}}},"text":null,"length":0,"last_read":{"hash":"2d586d1570895916d8c9fb9d184b037cc204dd71c92c6d2a98c76e1b664d3709","at":1744168019734},"key":"3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md#---frontmatter---","lines":[6,22],"size":1427,"outlinks":[],"class_name":"SmartBlock"},
"smart_blocks:3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md#Deep Research: Ngu·ªìn 12/3/2025": {"path":null,"embeddings":{"TaylorAI/bge-micro-v2":{"vec":[-0.06097512,-0.0087881,0.0209049,0.00038617,-0.02287694,-0.00751107,0.02751192,-0.01839725,0.06989703,-0.02330481,-0.00842014,-0.01756239,0.09135829,0.10988619,-0.00125363,0.00814425,0.00981597,0.00086054,0.04193253,-0.04394756,0.00637961,-0.06462376,0.01858862,0.01013759,0.02365161,0.02502009,0.02676471,-0.0192981,-0.02775799,-0.2482143,0.0395551,-0.00513787,-0.02672358,0.03803751,-0.05573447,-0.00847391,0.00707363,0.01669103,0.01942346,0.06088315,0.02455949,0.02959905,-0.01500136,0.00571317,0.00002195,-0.01455879,-0.00935733,-0.06192077,0.00191972,-0.03500056,-0.00552371,-0.03376761,0.06718712,-0.01764386,-0.00431623,0.08112705,0.06377442,0.08034152,0.01176921,-0.01369489,0.05536648,0.0073813,-0.17031251,0.05872234,-0.02860838,0.05496238,-0.03344933,-0.01799182,-0.00364463,0.04414636,-0.0157281,0.00059319,0.00279163,0.0537778,0.03165412,-0.03255555,0.04068211,-0.00212401,0.04171074,-0.03862988,-0.05176688,0.03831435,-0.04974524,-0.01196086,-0.04877867,-0.06841619,-0.00990567,-0.01111612,0.06720416,-0.03074805,-0.00859984,0.01221706,0.04442836,0.05514974,-0.05146899,0.01632393,0.07015377,0.06804201,-0.06454193,0.14634207,-0.03675472,0.03951754,0.00961964,0.00492486,-0.00510324,-0.018732,-0.00641019,-0.07020579,-0.11863136,0.06089401,0.00196447,-0.0137498,0.01778236,-0.02824031,0.05719673,0.00115044,0.04944665,-0.00589335,-0.02032577,0.02028475,-0.00272344,0.02807209,-0.00176051,-0.04572377,0.03426281,-0.0019481,0.05696239,0.01991387,0.01733153,0.04950493,0.06007271,0.0170794,-0.01887761,0.03778932,-0.00243274,-0.04254895,0.02771643,-0.0234468,-0.00208116,-0.05906892,-0.0317131,-0.01020001,0.03907008,-0.01090794,-0.08761568,0.16706339,0.01582789,0.00487193,-0.03321415,-0.07786337,-0.02978186,0.00888131,0.02038576,-0.02899585,0.01994458,0.00191942,0.05418225,0.10207916,-0.05789348,0.06460561,-0.05637475,-0.04166581,-0.02293578,0.07938215,0.03173086,-0.0554091,-0.03993272,0.02139196,-0.01826995,-0.02550352,0.05271778,0.02483539,-0.02596888,-0.07458603,0.00499903,-0.00302375,-0.04591413,-0.03848002,-0.00178136,0.03131836,-0.04458759,-0.07264049,0.00178004,0.00062572,-0.05438581,-0.03184481,-0.03043641,-0.01775474,0.01138074,0.03198117,-0.03070334,0.07749958,0.05979348,-0.00649605,-0.06206195,0.02231687,-0.05397779,-0.046459,-0.05367097,-0.04279084,0.0673844,0.00045896,-0.0292114,0.04567733,0.00146577,-0.03105036,-0.07509217,-0.01723101,0.00806371,0.00173641,-0.07340473,-0.0460044,-0.02859624,0.03419877,-0.05650935,-0.02568004,0.01246314,0.04197901,0.03412814,-0.04910964,0.03078344,-0.00090701,-0.04856702,-0.23125464,-0.03387445,-0.00927578,-0.00123053,0.08413869,-0.06901326,0.01301636,-0.02487234,0.06829838,0.00154291,0.00602485,-0.04572042,-0.06224789,-0.01655777,-0.00217427,0.03407408,-0.00726533,0.05837176,-0.04582906,0.01199795,0.03493059,-0.00496253,-0.00547629,-0.09377375,0.02896459,0.01429232,0.21081918,-0.0499883,-0.00461172,0.02211566,0.01475382,-0.02892973,-0.01343891,-0.08394991,0.08358113,0.02464169,-0.0270245,0.03839156,-0.00988857,-0.04610179,-0.05471362,0.06144746,0.0101232,-0.11081651,-0.02665689,-0.01036865,-0.04160997,-0.0673373,-0.01092241,-0.0239396,0.03014357,-0.03975415,-0.02004972,0.08811645,0.00636067,-0.06245079,-0.02686031,0.00501741,-0.01867996,0.04445636,-0.00700362,-0.02998588,-0.02279666,0.02026142,0.07517418,0.01323124,0.05771641,-0.00738766,-0.00875844,-0.02849105,-0.01672198,0.13531595,-0.04764038,-0.04447745,0.06354835,-0.01378947,-0.02481167,-0.09342605,-0.04268119,0.04043685,0.03833925,-0.04433644,0.02845752,0.04185047,0.0292085,0.01834963,0.05197116,0.02497527,0.06981081,0.05974849,0.04597348,0.05824886,-0.03870979,0.01417507,0.01692411,-0.02721558,-0.26251742,0.06191278,-0.00440869,0.02734549,0.00722834,0.03368644,0.04524714,0.01414669,-0.07726928,0.00223623,0.01570289,0.0312484,0.02994391,-0.00350285,0.00567566,0.03985552,0.07371154,0.00742459,0.05708596,-0.03155401,0.02319691,0.00139842,0.19396931,-0.00943677,0.04395813,0.04680982,-0.00747105,0.03340801,0.04677531,-0.02637811,-0.00166485,-0.01541312,0.12928,-0.01414242,0.09151775,0.00836446,-0.040429,0.04599673,0.08516279,0.02829777,-0.02833458,0.0345521,-0.01586984,0.01114567,0.0750801,0.01190686,-0.05658067,-0.05674075,-0.07167371,0.03183024,-0.02532814,-0.03414601,0.01708772,-0.04680292,0.01557732,-0.04098003,-0.00971109,-0.02460117,-0.01337549,0.00009105,0.01954689,-0.02621275,0.05319431,-0.03275912,-0.04755742],"last_embed":{"hash":"736b199e9cd44648a49eb819738c14360e3b56613818e07275b993b613a5b382","tokens":421}}},"text":null,"length":0,"last_read":{"hash":"736b199e9cd44648a49eb819738c14360e3b56613818e07275b993b613a5b382","at":1744168019942},"key":"3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md#Deep Research: Ngu·ªìn 12/3/2025","lines":[23,1028],"size":75438,"outlinks":[{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nShort-term memory, or thread -scoped memory, can be recalled at any time from within a single conversational thread with a user. LangGraph manages short- term memory as a part of your agent's 51. State is persisted to a database using a checkpointer so the thread can be resumed at any time. Short-term memory updates when the graph is invoked or a step is completed, and the State is read at the start of each step.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Short,the%20start%20of%20each%20step","line":6},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLangGraph manages short-term memory as part of the agent's state, persisted via thread-scoped checkpoints. This state can normally include the conversation history along with other stateful data, such as uploaded files, retrieved documents, or generated artifacts. By storing these in the graph's state, the bot can access the full context for a given conversation while maintaining separation between different threads.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=LangGraph%20manages%20short,maintaining%20separation%20between%20different%20threads","line":14},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nShort-term memory, or thread -scoped memory, can be recalled at any time from within a single conversational thread with a user. LangGraph manages short- term memory as a part of your agent's 51. State is persisted to a database using a checkpointer so the thread can be resumed at any time. Short-term memory updates when the graph is invoked or a step is completed, and the State is read at the start of each step.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Short,the%20start%20of%20each%20step","line":22},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong conversations pose a challenge to today's LLMs. The full history may not even fit inside an LLM's context window, resulting in an irrecoverable error. Even if your LLM technically supports the full context length, most LLMs still perform poorly over long contexts. They get \"distracted\" by stale or off-topic content, all while suffering from slower response times and higher costs.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long%20conversations%20pose%20a%20challenge,response%20times%20and%20higher%20costs","line":30},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nChat models accept context using messages, which include developer provided instructions (a system message) and user inputs (human messages). In chat applications, messages alternate between human inputs and model responses, resulting in a list of messages that grows longer over time. Because context windows are limited and token-rich message lists can be costly, many applications can benefit from using techniques to manually remove or forget stale information.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Chat%20models%20accept%20context%20using,remove%20or%20forget%20stale%20information","line":38},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nSummarizing past conversations¬∂\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Summarizing%20past%20conversations%C2%B6","line":46},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\ndef summarize_conversation(state: State):\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=def%20summarize_conversation","line":54},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory is shared across conversational threads. It can be recalled at any time and in any thread. Memories are scoped to any custom namespace, not just within a single thread ID. LangGraph provides stores (reference doc) to let you save and recall long-term memories.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memories","line":62},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory in LangGraph allows systems to retain information across different conversations or sessions. Unlike short-term memory, which is thread-\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memory%2C%20which%20is%20thread","line":70},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLangGraph stores long-term memories as JSON documents in a store ( 54). Each memory is organized under a custom `namespace` (similar to a folder) and a distinct `key` (like a filename). Namespaces often include user or org IDs or other labels that makes it easier to organize information. This structure enables hierarchical organization of memories. Cross-namespace searching is then supported through content filters. See the example below for an example.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=LangGraph%20stores%20long,example%20below%20for%20an%20example","line":78},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# InMemoryStore saves data to an in-memory dictionary. Use a DB-backed store in production use. store = InMemoryStore(index={\"embed\": embed, \"dims\": 2}) user_id = \"my-user\" application_context = \"chitchat\" namespace = (user_id, application_context) store.put( namespace, \"a-memory\",\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=,memory","line":86},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nuser_id = \"my-user\" application_context = \"chitchat\" namespace = (user_id, application_context) store.put( namespace, \"a-memory\", { \"rules\": [ \"User likes short, direct language\",\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=user_id%20%3D%20%22my,User%20likes%20short%2C%20direct%20language","line":94},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# get the \"memory\" by ID item = store.get(namespace, \"a-memory\") # search for \"memories\" within this namespace, filtering on content equivalence, sorted by vector similarity items = store.search( namespace, filter={\"my-key\": \"my-value\"}, query=\"language preferences\" )\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=,value%22%7D%2C%20query%3D%22language%20preferences%22","line":102},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory is shared across conversational threads. It can be recalled at any time and in any thread. Memories are scoped to any custom namespace, not just within a single thread ID. LangGraph provides stores ( 54) to let you save and recall long-term memories.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memories","line":110},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nDifferent applications require various types of memory. Although the analogy isn't perfect, examining human memory types can be insightful. Some research (e.g., the CoALA paper) have even mapped these human memory types to those used in AI agents.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Different%20applications%20require%20various%20types,those%20used%20in%20AI%20agents","line":118},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nMemory Type What is Stored Human Example Agent Example Semantic Facts Things I learned in school Facts about a user Episodic Experiences Things I did Past agent actions Procedural Instructions Instincts or motor skills Agent system prompt\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Memory%20Type%20What%20is%20Stored,motor%20skills%20Agent%20system%20prompt","line":126},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nSemantic memory, both in humans and AI agents, involves the retention of specific facts and concepts. In humans, it can include information learned in school and the understanding of concepts and their relationships. For AI agents, semantic memory is often used to personalize applications by remembering facts or concepts from past interactions.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Semantic%20memory%2C%20both%20in%20humans,or%20concepts%20from%20past%20interactions","line":134},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# Profile¬∂\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=","line":142},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nAlternatively, memories can be a collection of documents that are continuously updated and extended over time. Each individual memory can be more narrowly scoped and easier to generate, which means that you're less likely to lose information over time. It's easier for an LLM to generate new objects for new information than reconcile new information with an existing profile. As a result, a document collection tends to lead to higher recall downstream.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Alternatively%2C%20memories%20can%20be%20a,lead%20to%20higher%20recall%20downstream","line":150},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\npairs you've selected to represent your domain.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=pairs%20you%27ve%20selected%20to%20represent,your%20domain","line":158},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nHowever, this shifts some complexity memory updating. The model must now delete or update existing items in the list, which can be tricky. In addition, some models may default to over-inserting and others may default to over-updating. See the Trustcall package for one way to manage this and consider evaluation (e.g., with a tool like LangSmith) to help you tune the behavior.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=However%2C%20this%20shifts%20some%20complexity,help%20you%20tune%20the%20behavior","line":166},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nWhen do you want to update memories?\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=When%20do%20you%20want%20to,update%20memories","line":174},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":182},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":190},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":198},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":206},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":214},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":222},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":230},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":238},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":246},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\nHi this looks interesting. From your description it looks like mem0 remembers details and context of previous chats but not the actual text of chats. Is this a correct assumption?\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=Hi%20this%20looks%20interesting,Is%20this%20a%20correct%20assumption","line":254},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\n3. Content management: Claude has minimum length requirements for caching (1024 characters for Sonnet, 2048 for Haiku). Mem0 can handle information of any length, from short facts to longer contexts. 4. Customization: Developers have greater control over Mem0's memory management, including options for prioritizing or deprioritizing information based on relevance or time. Claude's caching system offers less direct control. 5. Information retrieval: Mem0 is designed for more precise and targeted information retrieval, while Claude's cache works with broader contextual blocks.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=3,works%20with%20broader%20contextual%20blocks","line":262},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":270},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\nAs mentioned in the post, we use a hybrid datastore approach that handles these cases effectively and that's where the graph aspect comes into picture.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=As%20mentioned%20in%20the%20post%2C,graph%20aspect%20comes%20into%20picture","line":278},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":286},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\n1. Purpose and duration: Claude's cache is designed for short-term memory, clearing every 5 minutes. In contrast, Mem0 is built for long-term information storage, retaining data indefinitely unless instructed otherwise. 2. Flexibility and control: Mem0 offers more flexibility, allowing developers to update, delete, or modify stored information as needed. Claude's cache is more static - new information creates additional entries rather than updating existing ones. 3. Content management: Claude has minimum length requirements for caching (1024 characters for Sonnet, 2048 for Haiku). Mem0 can handle information of any length, from short facts to longer contexts. 4. Customization: Developers have\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=1,Customization%3A%20Developers%20have","line":294},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":302},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":310},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":318},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\ndesigned for more precise and targeted information retrieval, while Claude's cache works with broader contextual blocks.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=designed%20for%20more%20precise%20and,works%20with%20broader%20contextual%20blocks","line":326},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":334},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.anthropic.com&sz=32","line":342},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":350},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":358},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":366},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":374},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":382},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.getzep.com&sz=32","line":390},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":398},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":406},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":414},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":422},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":430},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":436},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":442},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":450},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.generational.pub&sz=32","line":458},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":466},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":474},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":482},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":490},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":498},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":506},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":514},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.me.bot&sz=32","line":522},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":530},{"title":"\n\nlangchain-ai.github\n\n5\n\n\n\n","target":"https://langchain-ai.github.io/","line":542},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":550},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":558},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":562},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":570},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":578},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":582},{"title":"\n\nnews.ycombinator\n\n2\n\n\n\n","target":"https://news.ycombinator.com/","line":590},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.cognee.ai&sz=32","line":598},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":602},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":606},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":610},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.anthropic.com&sz=32","line":618},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":629},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":637},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":645},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":653},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":661},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":669},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":677},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":685},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":693},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":701},{"title":"\n\nopenreview.net\n\nLanguage model with Plug-in Knowldge Memory | OpenReview\n\nof knowledge PLM needs to solve certain task. In this paper, we introduce PlugLM, a pre-training model with differentiable plug-in memory(DPM). The key intuition behind is to decouple the knowledge storage from model parameters with an editable and scalable key-value memory and leverage knowledge in an explainable manner by knowledge retrieval in the DPM. We conduct extensive experiments under various settings to justify this design choice. In domain adaptation setting, PlugLM could be easily adapted to different domains with plugable in-domain memory---obtaining 3.95 F1 improvements across four domains, without any in-domain training. PlugLM could also keep absorbing new knowledge\n\n","target":"https://openreview.net/forum?id=Plr5l7r0jY6#:~:text=of%20knowledge%20PLM%20needs%20to,also%20keep%20absorbing%20new%20knowledge","line":709},{"title":"\n\nopenreview.net\n\nLanguage model with Plug-in Knowldge Memory | OpenReview\n\nadaptation setting, PlugLM could be easily adapted to different domains with plugable in-domain memory---obtaining 3.95 F1 improvements across four domains, without any in-domain training. PlugLM could also keep absorbing new knowledge after pre-training is done by knowledge updating operation in the DPM without re-training. Finally, we show that by incorporating training samples into DPM with knowledge prompting, PlugLM could further be improved by the instruction of in-task knowledge.\n\n","target":"https://openreview.net/forum?id=Plr5l7r0jY6#:~:text=adaptation%20setting%2C%20PlugLM%20could%20be,task%20knowledge","line":717},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":725},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":733},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":741},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":749},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":755},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":761},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":767},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":773},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":779},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":787},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":795},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":803},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":811},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://ar5iv.labs.arxiv.org&sz=32","line":819},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":827},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://ar5iv.labs.arxiv.org&sz=32","line":835},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":843},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":851},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":859},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":867},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":875},{"title":"\n\nopenreview.net\n\n200 The event memory module is designed to perceive 201 historical events to generate coherent responses 202 across interval time. As shown in Figure 2, this 203 event memory module is segmented into two major 204 sub-modules that focus separately on long-term 205 and short-term memory. 206 2.2.1 Long-term Memory 207 Memory Storage. The long-term memory mod\u0002208 ule aims to extract and encode events from past 209 sessions. Specifically, this involves recording\n\n","target":"https://openreview.net/pdf?id=lwCxVgVYoK#:~:text=200%20The%20event%20memory%20module,Specifically%2C%20this%20involves%20recording","line":883},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":889},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":897},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":905},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":913},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":921},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":929},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":937},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":945},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":953},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":961},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":969},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":977},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":985},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":991},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":997}],"class_name":"SmartBlock"},
"smart_blocks:3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md#Deep Research: Ngu·ªìn 12/3/2025#{1}": {"path":null,"embeddings":{"TaylorAI/bge-micro-v2":{"vec":[-0.06147089,-0.01037955,0.02076672,0.00010246,-0.02416712,-0.00623019,0.02866355,-0.01874012,0.07051948,-0.02367973,-0.01154777,-0.01464404,0.09312202,0.11054017,-0.00201335,0.00773605,0.00872726,0.00079669,0.03955855,-0.04464153,0.00734058,-0.06738853,0.01874442,0.00830354,0.02379618,0.02543492,0.02653654,-0.01970247,-0.0274107,-0.24885716,0.03987304,-0.0067628,-0.02767114,0.0363327,-0.05824319,-0.00816025,0.00670417,0.01781201,0.01765826,0.06315722,0.02367226,0.02951537,-0.01408976,0.00607225,-0.00278956,-0.01434477,-0.01036231,-0.06265157,0.00003568,-0.03272784,-0.00449618,-0.03680525,0.06567574,-0.01782463,-0.00627113,0.08133713,0.06258882,0.08151857,0.01288788,-0.01285419,0.05374336,0.00476816,-0.16977808,0.05757836,-0.02825759,0.05711616,-0.03404856,-0.01715787,-0.00377568,0.04304553,-0.01646184,0.00252182,0.00301801,0.05475649,0.03194072,-0.0338054,0.03941673,-0.00266561,0.04230667,-0.03799457,-0.05175991,0.03748196,-0.04892514,-0.01231293,-0.04835818,-0.06775759,-0.01030435,-0.01192623,0.0663721,-0.03027068,-0.00970164,0.01035505,0.04506987,0.0551324,-0.05154859,0.01793096,0.07159638,0.06688122,-0.06496066,0.14724024,-0.03850598,0.04046967,0.0127651,0.00580127,-0.00437288,-0.02130217,-0.00766993,-0.06951806,-0.11789627,0.05977505,0.00252216,-0.0112188,0.01818847,-0.02786934,0.05798418,-0.00096927,0.04924023,-0.00734276,-0.02056106,0.02112608,-0.00067544,0.02933047,-0.00017478,-0.04520838,0.03405977,-0.0007733,0.05669674,0.01957253,0.01872437,0.04776053,0.05883938,0.01854132,-0.02023232,0.03903778,-0.00211823,-0.04212771,0.02899133,-0.02319773,0.00126206,-0.05814334,-0.02859525,-0.01283572,0.03838922,-0.01119492,-0.08650825,0.17023347,0.01536917,0.00800134,-0.0339088,-0.0771888,-0.03227007,0.01001199,0.02003772,-0.02819845,0.02177159,0.00327157,0.05365607,0.10179466,-0.05679592,0.06437526,-0.05968975,-0.03990899,-0.01860563,0.07809609,0.03119475,-0.05633451,-0.0390514,0.02191988,-0.01906181,-0.02399132,0.0507918,0.02462068,-0.02568469,-0.0753075,0.00363241,-0.00403031,-0.04754438,-0.0378722,-0.00210041,0.03370457,-0.04400204,-0.07057775,0.00060911,0.00001005,-0.05520259,-0.0322106,-0.02921999,-0.01837952,0.011429,0.0324326,-0.03058419,0.0772685,0.05958487,-0.00737114,-0.06110278,0.0227307,-0.05430546,-0.04571766,-0.05167018,-0.04092058,0.06806755,0.00060088,-0.02819572,0.04431654,0.00142772,-0.03031412,-0.07449783,-0.01770387,0.00861552,0.00080095,-0.07300705,-0.04660301,-0.02756874,0.03461467,-0.05488756,-0.02706058,0.01214557,0.04063048,0.03614664,-0.04767807,0.03079118,-0.00050011,-0.04949697,-0.23106429,-0.03333943,-0.00876144,0.00093987,0.08503632,-0.07117902,0.01295726,-0.02564121,0.0673695,0.00138774,0.00721976,-0.0444282,-0.06346715,-0.01776133,-0.00175006,0.03331223,-0.00691484,0.05821169,-0.04479469,0.01294369,0.03343227,-0.00728674,-0.00297572,-0.09436915,0.02928596,0.01384746,0.21197143,-0.04914119,-0.00674879,0.02025093,0.0134259,-0.0285006,-0.01453691,-0.08416802,0.082638,0.02512546,-0.02724286,0.03748232,-0.00838869,-0.0460544,-0.05675738,0.05954203,0.01072041,-0.1123471,-0.02692671,-0.00940351,-0.0415728,-0.06806049,-0.00963215,-0.02425115,0.0301306,-0.04017619,-0.01706138,0.08763324,0.00794555,-0.06366394,-0.02617159,0.00465537,-0.01895964,0.0429526,-0.00687415,-0.03149111,-0.02416311,0.02075406,0.07544754,0.01342143,0.05744353,-0.00855173,-0.01027524,-0.03026905,-0.01515372,0.13534833,-0.04800708,-0.04467196,0.06257495,-0.01335895,-0.02609246,-0.09185952,-0.0420706,0.03880536,0.03841024,-0.0444864,0.03012315,0.04183982,0.02809429,0.01864824,0.05162149,0.02611093,0.07039008,0.05880393,0.04603906,0.05889596,-0.03767618,0.01463637,0.0148878,-0.025512,-0.26227367,0.06351781,-0.00471053,0.02570373,0.00799682,0.03362472,0.04612266,0.01475017,-0.0771678,0.00239334,0.0153134,0.03092828,0.03348795,-0.00208657,0.0074894,0.0388962,0.07292314,0.00761908,0.05725765,-0.03311867,0.0216896,0.00074069,0.19319171,-0.0082264,0.04378642,0.04734481,-0.0058681,0.03541391,0.04719449,-0.02632905,-0.00361646,-0.01879584,0.12931585,-0.012979,0.09133004,0.00803935,-0.03918485,0.04473697,0.08430529,0.02647624,-0.02835214,0.03254402,-0.01481786,0.01048203,0.07626266,0.0130362,-0.05399297,-0.05589056,-0.07078514,0.02995589,-0.02715762,-0.03301797,0.01764196,-0.0463625,0.01415475,-0.04166311,-0.00902239,-0.02352514,-0.01542274,0.00078925,0.02107134,-0.02444717,0.05120118,-0.03167704,-0.04812016],"last_embed":{"hash":"93bf627b9293c72b2fe983e101f0495b87a85fc269dde2e9609378390359731e","tokens":420}}},"text":null,"length":0,"last_read":{"hash":"93bf627b9293c72b2fe983e101f0495b87a85fc269dde2e9609378390359731e","at":1744168020099},"key":"3_AI Engineering/5.3 AI Agent/Th∆∞ m·ª•c ƒë·ªçc/Read 0. Reference.md#Deep Research: Ngu·ªìn 12/3/2025#{1}","lines":[25,1028],"size":75404,"outlinks":[{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nShort-term memory, or thread -scoped memory, can be recalled at any time from within a single conversational thread with a user. LangGraph manages short- term memory as a part of your agent's 51. State is persisted to a database using a checkpointer so the thread can be resumed at any time. Short-term memory updates when the graph is invoked or a step is completed, and the State is read at the start of each step.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Short,the%20start%20of%20each%20step","line":4},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLangGraph manages short-term memory as part of the agent's state, persisted via thread-scoped checkpoints. This state can normally include the conversation history along with other stateful data, such as uploaded files, retrieved documents, or generated artifacts. By storing these in the graph's state, the bot can access the full context for a given conversation while maintaining separation between different threads.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=LangGraph%20manages%20short,maintaining%20separation%20between%20different%20threads","line":12},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nShort-term memory, or thread -scoped memory, can be recalled at any time from within a single conversational thread with a user. LangGraph manages short- term memory as a part of your agent's 51. State is persisted to a database using a checkpointer so the thread can be resumed at any time. Short-term memory updates when the graph is invoked or a step is completed, and the State is read at the start of each step.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Short,the%20start%20of%20each%20step","line":20},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong conversations pose a challenge to today's LLMs. The full history may not even fit inside an LLM's context window, resulting in an irrecoverable error. Even if your LLM technically supports the full context length, most LLMs still perform poorly over long contexts. They get \"distracted\" by stale or off-topic content, all while suffering from slower response times and higher costs.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long%20conversations%20pose%20a%20challenge,response%20times%20and%20higher%20costs","line":28},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nChat models accept context using messages, which include developer provided instructions (a system message) and user inputs (human messages). In chat applications, messages alternate between human inputs and model responses, resulting in a list of messages that grows longer over time. Because context windows are limited and token-rich message lists can be costly, many applications can benefit from using techniques to manually remove or forget stale information.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Chat%20models%20accept%20context%20using,remove%20or%20forget%20stale%20information","line":36},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nSummarizing past conversations¬∂\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Summarizing%20past%20conversations%C2%B6","line":44},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\ndef summarize_conversation(state: State):\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=def%20summarize_conversation","line":52},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory is shared across conversational threads. It can be recalled at any time and in any thread. Memories are scoped to any custom namespace, not just within a single thread ID. LangGraph provides stores (reference doc) to let you save and recall long-term memories.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memories","line":60},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory in LangGraph allows systems to retain information across different conversations or sessions. Unlike short-term memory, which is thread-\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memory%2C%20which%20is%20thread","line":68},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLangGraph stores long-term memories as JSON documents in a store ( 54). Each memory is organized under a custom `namespace` (similar to a folder) and a distinct `key` (like a filename). Namespaces often include user or org IDs or other labels that makes it easier to organize information. This structure enables hierarchical organization of memories. Cross-namespace searching is then supported through content filters. See the example below for an example.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=LangGraph%20stores%20long,example%20below%20for%20an%20example","line":76},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# InMemoryStore saves data to an in-memory dictionary. Use a DB-backed store in production use. store = InMemoryStore(index={\"embed\": embed, \"dims\": 2}) user_id = \"my-user\" application_context = \"chitchat\" namespace = (user_id, application_context) store.put( namespace, \"a-memory\",\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=,memory","line":84},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nuser_id = \"my-user\" application_context = \"chitchat\" namespace = (user_id, application_context) store.put( namespace, \"a-memory\", { \"rules\": [ \"User likes short, direct language\",\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=user_id%20%3D%20%22my,User%20likes%20short%2C%20direct%20language","line":92},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# get the \"memory\" by ID item = store.get(namespace, \"a-memory\") # search for \"memories\" within this namespace, filtering on content equivalence, sorted by vector similarity items = store.search( namespace, filter={\"my-key\": \"my-value\"}, query=\"language preferences\" )\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=,value%22%7D%2C%20query%3D%22language%20preferences%22","line":100},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nLong-term memory is shared across conversational threads. It can be recalled at any time and in any thread. Memories are scoped to any custom namespace, not just within a single thread ID. LangGraph provides stores ( 54) to let you save and recall long-term memories.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Long,term%20memories","line":108},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nDifferent applications require various types of memory. Although the analogy isn't perfect, examining human memory types can be insightful. Some research (e.g., the CoALA paper) have even mapped these human memory types to those used in AI agents.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Different%20applications%20require%20various%20types,those%20used%20in%20AI%20agents","line":116},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nMemory Type What is Stored Human Example Agent Example Semantic Facts Things I learned in school Facts about a user Episodic Experiences Things I did Past agent actions Procedural Instructions Instincts or motor skills Agent system prompt\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Memory%20Type%20What%20is%20Stored,motor%20skills%20Agent%20system%20prompt","line":124},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nSemantic memory, both in humans and AI agents, involves the retention of specific facts and concepts. In humans, it can include information learned in school and the understanding of concepts and their relationships. For AI agents, semantic memory is often used to personalize applications by remembering facts or concepts from past interactions.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Semantic%20memory%2C%20both%20in%20humans,or%20concepts%20from%20past%20interactions","line":132},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\n# Profile¬∂\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=","line":140},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nAlternatively, memories can be a collection of documents that are continuously updated and extended over time. Each individual memory can be more narrowly scoped and easier to generate, which means that you're less likely to lose information over time. It's easier for an LLM to generate new objects for new information than reconcile new information with an existing profile. As a result, a document collection tends to lead to higher recall downstream.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=Alternatively%2C%20memories%20can%20be%20a,lead%20to%20higher%20recall%20downstream","line":148},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\npairs you've selected to represent your domain.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=pairs%20you%27ve%20selected%20to%20represent,your%20domain","line":156},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nHowever, this shifts some complexity memory updating. The model must now delete or update existing items in the list, which can be tricky. In addition, some models may default to over-inserting and others may default to over-updating. See the Trustcall package for one way to manage this and consider evaluation (e.g., with a tool like LangSmith) to help you tune the behavior.\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=However%2C%20this%20shifts%20some%20complexity,help%20you%20tune%20the%20behavior","line":164},{"title":"\n\nlangchain-ai.github.io\n\nMemory\n\nWhen do you want to update memories?\n\n","target":"https://langchain-ai.github.io/langgraph/concepts/memory/#:~:text=When%20do%20you%20want%20to,update%20memories","line":172},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":180},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":188},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":196},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":204},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":212},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":220},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":228},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":236},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":244},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\nHi this looks interesting. From your description it looks like mem0 remembers details and context of previous chats but not the actual text of chats. Is this a correct assumption?\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=Hi%20this%20looks%20interesting,Is%20this%20a%20correct%20assumption","line":252},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\n3. Content management: Claude has minimum length requirements for caching (1024 characters for Sonnet, 2048 for Haiku). Mem0 can handle information of any length, from short facts to longer contexts. 4. Customization: Developers have greater control over Mem0's memory management, including options for prioritizing or deprioritizing information based on relevance or time. Claude's caching system offers less direct control. 5. Information retrieval: Mem0 is designed for more precise and targeted information retrieval, while Claude's cache works with broader contextual blocks.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=3,works%20with%20broader%20contextual%20blocks","line":260},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":268},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\nAs mentioned in the post, we use a hybrid datastore approach that handles these cases effectively and that's where the graph aspect comes into picture.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=As%20mentioned%20in%20the%20post%2C,graph%20aspect%20comes%20into%20picture","line":276},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":284},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\n1. Purpose and duration: Claude's cache is designed for short-term memory, clearing every 5 minutes. In contrast, Mem0 is built for long-term information storage, retaining data indefinitely unless instructed otherwise. 2. Flexibility and control: Mem0 offers more flexibility, allowing developers to update, delete, or modify stored information as needed. Claude's cache is more static - new information creates additional entries rather than updating existing ones. 3. Content management: Claude has minimum length requirements for caching (1024 characters for Sonnet, 2048 for Haiku). Mem0 can handle information of any length, from short facts to longer contexts. 4. Customization: Developers have\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=1,Customization%3A%20Developers%20have","line":292},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":300},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":308},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":316},{"title":"\n\nnews.ycombinator.com\n\nShow HN: Mem0 ‚Äì open-source Memory Layer for AI apps | Hacker News\n\ndesigned for more precise and targeted information retrieval, while Claude's cache works with broader contextual blocks.\n\n","target":"https://news.ycombinator.com/item?id=41447317#:~:text=designed%20for%20more%20precise%20and,works%20with%20broader%20contextual%20blocks","line":324},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":332},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.anthropic.com&sz=32","line":340},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":348},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":356},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":364},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":372},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":380},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.getzep.com&sz=32","line":388},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":396},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":404},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":412},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":420},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":428},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":434},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":440},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":448},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.generational.pub&sz=32","line":456},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":464},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":472},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":480},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":488},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":496},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":504},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":512},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.me.bot&sz=32","line":520},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":528},{"title":"\n\nlangchain-ai.github\n\n5\n\n\n\n","target":"https://langchain-ai.github.io/","line":540},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://docs.mem0.ai&sz=32","line":548},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.graphlit.com&sz=32","line":556},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":560},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":568},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://microsoft.github.io&sz=32","line":576},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://redis.io&sz=32","line":580},{"title":"\n\nnews.ycombinator\n\n2\n\n\n\n","target":"https://news.ycombinator.com/","line":588},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.cognee.ai&sz=32","line":596},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":600},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.lukew.com&sz=32","line":604},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.qiscus.com&sz=32","line":608},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://www.anthropic.com&sz=32","line":616},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":627},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":635},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":643},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":651},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":659},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":667},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":675},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":683},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://en.wikipedia.org&sz=32","line":691},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":699},{"title":"\n\nopenreview.net\n\nLanguage model with Plug-in Knowldge Memory | OpenReview\n\nof knowledge PLM needs to solve certain task. In this paper, we introduce PlugLM, a pre-training model with differentiable plug-in memory(DPM). The key intuition behind is to decouple the knowledge storage from model parameters with an editable and scalable key-value memory and leverage knowledge in an explainable manner by knowledge retrieval in the DPM. We conduct extensive experiments under various settings to justify this design choice. In domain adaptation setting, PlugLM could be easily adapted to different domains with plugable in-domain memory---obtaining 3.95 F1 improvements across four domains, without any in-domain training. PlugLM could also keep absorbing new knowledge\n\n","target":"https://openreview.net/forum?id=Plr5l7r0jY6#:~:text=of%20knowledge%20PLM%20needs%20to,also%20keep%20absorbing%20new%20knowledge","line":707},{"title":"\n\nopenreview.net\n\nLanguage model with Plug-in Knowldge Memory | OpenReview\n\nadaptation setting, PlugLM could be easily adapted to different domains with plugable in-domain memory---obtaining 3.95 F1 improvements across four domains, without any in-domain training. PlugLM could also keep absorbing new knowledge after pre-training is done by knowledge updating operation in the DPM without re-training. Finally, we show that by incorporating training samples into DPM with knowledge prompting, PlugLM could further be improved by the instruction of in-task knowledge.\n\n","target":"https://openreview.net/forum?id=Plr5l7r0jY6#:~:text=adaptation%20setting%2C%20PlugLM%20could%20be,task%20knowledge","line":715},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":723},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":731},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":739},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":747},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":753},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":759},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":765},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":771},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":777},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":785},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":793},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":801},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":809},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://ar5iv.labs.arxiv.org&sz=32","line":817},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":825},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://ar5iv.labs.arxiv.org&sz=32","line":833},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":841},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":849},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":857},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":865},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":873},{"title":"\n\nopenreview.net\n\n200 The event memory module is designed to perceive 201 historical events to generate coherent responses 202 across interval time. As shown in Figure 2, this 203 event memory module is segmented into two major 204 sub-modules that focus separately on long-term 205 and short-term memory. 206 2.2.1 Long-term Memory 207 Memory Storage. The long-term memory mod\u0002208 ule aims to extract and encode events from past 209 sessions. Specifically, this involves recording\n\n","target":"https://openreview.net/pdf?id=lwCxVgVYoK#:~:text=200%20The%20event%20memory%20module,Specifically%2C%20this%20involves%20recording","line":881},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":887},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":895},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":903},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":911},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":919},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":927},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":935},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":943},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":951},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":959},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":967},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://arxiv.org&sz=32","line":975},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":983},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://aclanthology.org&sz=32","line":989},{"title":"\n\n![Favicon","target":"https://www.google.com/s2/favicons?domain=https://medium.com&sz=32","line":995}],"class_name":"SmartBlock"},
